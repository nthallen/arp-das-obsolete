#! /bin/sh
#__USAGE
#%C	[node]
#	Attempts to locate the QNX network server, node 1, by looking
#	to see if other nodes can see it and comparing netmap
#	entries.

typeset node=1
[ -n "$1" ] && node=$1

function nl_error {
  echo netmaptrap: $* >&2
  exit 1
}

[ "$node" = "$NODE" ] && nl_error "I can see myself!"

# checkit will attempt to see node 1. If it succeeds, it will
# take steps to make sure we can find it later.
function checkit {
  if [ -d //$node/etc ]; then
	echo I see it!
	echo Updating netmap file on node $NODE
	netmap >/etc/config/netmap
	echo Updating netmap file on node $node
	netmap -n $node >//$node/etc/config/netmap
	[ -d //1/etc ] &&
	  cp -vn //1/etc/config/sysinit.all /etc/config/sysinit.all
	exit 0;
  fi
}

function get_lic {
  typeset node=$1 nd=$2
  lic=`on -n $nd /bin/sin -n $node info |
    /bin/awk 'NR==4 {for(i=1;i<NF;i++){f[$i]=i}}
	NR==5 { print $f["Nodes"] }'`
  [ -n "$lic" ] ||
	nl_error "Unable to determine licenses for node $node\n"
  echo $lic
}

if netmap | egrep -q "^mask +$node +2"; then
  echo "Unmasking node $node's local netmap entry"
  netmap -m "u $node 2"
fi
if netmap | egrep -q "^mask +$NODE +2"; then
  echo "Unmasking my node's local netmap entry"
  netmap -m "u $NODE 2"
fi
if netmap | egrep -q "^ +$node +2"; then
  # Strategy:
  echo Trying direct connection
  checkit

  echo "OK, I guess that didn't work. I'll delete my map for node $node"
  netmap -m "d $node 2"
else
  echo "There is currently no map for node $node in your netmap"
fi

echo "Let's see if anyone else can see node $node:"
typeset nd sawnd=no nodes
if [ -r /etc/config/node.map ]; then
  nodes=`sed -e 's/:.*$//' -e '/^[^0-9].*$/d' /etc/config/node.map`
else
  echo "I can't find /etc/config/node.map, so I'll have to use alive -u"
  nodes=`alive -u`
fi
for n in $nodes; do
  echo "$n\\r\\c"
  if [ "$n" != "$NODE" -a -d //$n/etc ]; then
	sawnd=yes
	on -f $n sh -c "[ -d //$node/etc ]" && nd=$n && break;
  fi
done
if [ -z "$nd" ]; then
  if [ "$sawnd" = "yes" ]; then
	cat <<EOF
	  I was unable to find any nodes which can see node $node.
	  The possible causes for this include:
	    Node $node is not on
		Node $node is not properly connected to the network
		Node $node's network interface is malfunctioning
		Node $node's hardware has changed and no one knows its
		 new ethernet address
	  You should go to node $node and run "netmaptrap $NODE"
	  to see if you can see your node from there. If you can,
	  return to your node and rerun netmaptrap $node.
EOF
  else
	cat <<EOF
	  I could not see anything at all on the network.
	  It is possible that you are not physically connected
	  to the network. Double check your cable and interface
	  board. If you have changed your interface board, and
	  no one knows your address, you should go to another
	  node and run 'netmaptrap $NODE', then return to this
	  node and run netmaptrap again.
EOF
  fi
fi

[ -z "$nd" ] && exit 1

echo "OK, node $nd can apparently see node $node"
lic=`get_lic $NODE $NODE`
if [ "$lic" -lt "$node" ]; then
  echo
  echo "Oops: We only have $lic licenses, so we can't see node $node."
  echo "I will try to update licenses from node $nd:"
  /bin/license //$nd/etc/licenses /etc/licenses
  /bin/license -r
  # This line is incompatible with 4.22:
  lic=`get_lic $NODE $NODE`
  if [ "$lic" -lt "$node" ]; then
	nl_error "Updating licenses for node $NODE failed: Get Help!"
  fi
fi
lic=`get_lic $node $nd`
if [ "$lic" -lt "$NODE" ]; then
  echo
  echo "Oops: Node $node only has $lic licenses, so it can't see"
  echo "me at node $NODE; I'll try to update it from node $nd:"
  on -f $nd /bin/license //$nd/etc/licenses //$node/etc/licenses
  on -f $nd -t //$nd/dev/con sh -c "on -n $node /bin/license -r"
  sleep 5
  lic=`get_lic $node $nd`
  if [ "$lic" -lt "$NODE" ]; then
	nl_error "Updating licenses for node $node failed: Get help!"
  else
	echo
	echo "OK, I've updated the licenses on node $node, but"
	echo "I still may not be able to update node $node's"
	echo "netmap until node $node is rebooted, but I'll try!"
	echo
  fi
fi

echo "Now I will attempt to use $nd's netmap for node $node:"
map=`netmap -n $nd | egrep "^ *$node +2 +[0-9A-Z]+ +[0-9A-Z]+ *;"`
[ -z "$map" ] &&
  nl_error "I got no netmap for node $node on node $nd"
# map2=`echo $map | sed -e 's,^ *,,' -e 's, *;.*$,,' -e 's,  *, ,g'`
# [ -z "$map2" ] &&
#   nl_error "I could not understand node $nd's netmap: $map"
# map=$map2
echo "Node $nd says: $map"
netmap -m "$map"

echo "I'll also set my netmap on node $node:"
map=`netmap | egrep "^ *$NODE +2 +"`
echo $map

res=`on -f $nd netmap -n $node -m "$map" 2>&1`
echo $res
case $res in
  *rejected*)
	echo "\n  Node $node currently cannot accomodate your netmap"
	echo "  entry. This is probably because it hasn't been rebooted"
	echo "  since its licenses were last updated. See if you can"
	echo "  arrange for node $node to be rebooted soon. Until then"
	echo "  you are probably out of luck."
	exit 1;;
esac
checkit

echo "OK, I guess that didn't work."
echo "I'll delete my map for node $node again"
netmap -m "d $node 2"

cat <<EOF

  OK, I give up. Why don't you try running "netmaptrap $NODE"
  on node $node? If you already tried that once, try it again
  one more time before giving up.
EOF
