#! /bin/sh
#__USAGE
#Outputs a script to handle GSE operations
#%C <displayprog> <cltprog> <screenfile> [<monocfgfile>] [<colorcfgfile>]
#If only the basename of <screenfile> is used, then the rules for scrpaint
#arguments apply

if test $# -lt 3; then
  echo Error: Not enough command line arguments
  echo
  exec use $0
fi

typeset display=$1 client=$2 screen=$3 mono_cfg=$4 color_cfg=$5

cat <<-END
#! /bin/sh
#__USAGE
#GSE Operations: Display, Command, Algorithm, Deter, Shutdown, Startup.
#Default Operation: Display and Command with experiment batch file "interact".
#To Start on unconfigured flight node: define FlightNode in Experiment.config.
#
#%C     [<option>...] [<algorithm_executable>...]
#or
#%C     [<argument>]
#
#<option>:
#       -c                      no command line
#       -d                      no display
#       -b <batchfile>          experiment startup batch file
#<algorithm_executable>:
#                               algorithm program
#<argument>:
#       not                     deter start of experiment (pick_file /dev/null)
#       stop                    shutdown experiment (startdbr quit)
#

cd \`dirname \$0\`

cfile=Experiment.config
if [ ! -f "\$cfile" ]; then
  echo Cannot locate \$cfile >&2
  exit 1
fi
unset Experiment HomeDir FlightNode
. \$cfile
if [ -z "\$Experiment" ]; then
  echo Experiment undefined in \$cfile >&2
  exit 1
fi
export Experiment
[ -n "FlightNode" ] && export FlightNode

[ -z "\$RTG_DOIT" ] || namewait -t0 huarp/rtg 2>/dev/null || {
  on -t /dev/con1 /windows/apps/rtg/rtg -f \$RTG_DOIT
  renice -2 -p \$\$
}

typeset _display=$display _client=$client _screen=$screen 
typeset _mono_cfg=$mono_cfg _color_cfg=$color_cfg

typeset _cmding _disping _batch _algoing _bg_ids
_cmding=yes
_disping=yes
_batch=interact
_algoing=no
_bg_ids=""

while getopts b:dc opt \$*; do
   case \$opt in
     d) _disping=no;;
     c) _cmding=no;;
     b) _batch=\$OPTARG;;
     \?) echo; exec use \$0;;
   esac
done
let sval=\$OPTIND-1
shift \$sval

for i in ; do
  case \$i in
    not)
      echo Deterring Startup of Experiment \$Experiment
      echo Waiting for pick_file
      pick_file /dev/null
      exit 0;;
    stop)
      if [ -z "\$FlightNode" ]; then
        FlightNode=\`namewait -n0 -t0 -G parent 2>/dev/null\`
        if [ -z "\$FlightNode" ]; then
          echo Unable to locate flight node for experiment \$Experiment >&2
          exit 1
        fi
      fi
      echo Shutting down Experiment \$Experiment on Node \$FlightNode
      on -f \$FlightNode /usr/local/bin/startdbr quit
      exit 0;;
    *) : ;;
  esac
done

# check for algorithms
[ -n "\$1" ] && _algoing=yes

echo Waiting for pick_file
_EXP_NODE=\`pick_file -n \$_batch\`
[ -n "\$_EXP_NODE" ] || exit 1

echo Waiting for Data Buffer
namewait -n\$_EXP_NODE db

if [ -z "\$MONOCHROME" ]; then
   _attrs=02,06,04,05
   _cfgfile="\$_mono_cfg"
else
   _cfgfile="\$_color_cfg"
fi

typeset -i _row=24
[ "\$_cmding" = "yes" ] && let _row=22

_out=\`tty\`,\$_row,0,80,\$_attrs

_amp="&"

if [ "\$_algoing" = "yes" -o "\$_cmding" = "yes" ]; then
  echo Waiting for Command Interpreter
  namewait -n\$_EXP_NODE cmdinterp
else
  _amp=""
fi

if [ "\$_disping" = "yes" ]; then
  scrpaint -v -o \$_out -c\$_EXP_NODE \$_screen \$_cfgfile
  eval \$_display -v -o \$_out -c\$_EXP_NODE -b\$_EXP_NODE -i1 \$_amp
  [ "\$_amp" = "&" ] && _bg_ids="\$_bg_ids \$!"
fi

while [ \$# -gt 0 ]; do
  [ "\$_cmding" = "no" -a \$# -le 1 ] && _amp=""
  let _row=_row-2
  eval \$1 -v -o \$_out -r\$_row -C\$_EXP_NODE -c\$_EXP_NODE -l -b\$_EXP_NODE -i1 -m \$_amp
  [ "\$_amp" = "&" ] && _bg_ids="\$_bg_ids \$!"
  shift
done


[ "\$_cmding" = "yes" ] && {
  \$_client -v -C\$_EXP_NODE -c\$_EXP_NODE -o \$_out ||
    exec parent -qvnt3 -p "\$_bg_ids"
}
exec parent -qvnt3

END
