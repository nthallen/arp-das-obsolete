#! /usr/local/bin/perl -w
use strict;

# This is a script to read through getarc log files and
# compile various summary documents. For starters, I
# will generate:

# /sci/archive/$Mission/tbl/varlist.html
#    list of variables with description(s)
# /sci/archive/$Mission/tbl/vartbl.html
#    table of variables by flight
# /sci/archive/$Mission/tbl/filetbl.html
#    table of files by flight

# I need to know the mission name and where the log files are kept.
# They look like: ^\d{8}\.log(\.F)?$
# I also need to know where the output will go

my $arcdir = "//1/home/archive";
my $LogRoot = "//23/d2/home/archive";
my $HTMLRoot = "//23/usr/local/httpd/htdocs/arp/sci/archive";
-d $HTMLRoot || die "Unable to locate dir '$HTMLRoot'\n";

my %GVars;

my ( $Mission ) = @ARGV;

ReadMissionLogs( $Mission );

sub ReadMissionLogs {
  my ( $Mission ) = @_;
  my $LogDir = "$LogRoot/$Mission";
  my @Dates;
  my %Insts;
  my %Vars;

  opendir LDIR, "$LogDir" ||
	die "Unable to read log directory $LogDir\n";

  my @logs = grep /^\d{8}\.log(\.F)?$/, readdir LDIR;
  closedir LDIR ||
	warn "Error closing log directory $LogDir\n";

  foreach my $log ( @logs ) {
	$log =~ m/^(\d{8})\.log(\.F)?$/ || die;
	my $flog = "$LogDir/$log";
	my $ifile = $2 ? "fcat $flog |" : "<$flog";
	my $Date = $1;
	push ( @Dates, $Date );

	open( IFILE, $ifile ) || die "Unable to read log $flog\n";
	print "$Mission $Date\n";
	# record flight
	while (<IFILE>) {
	  next if m/^\d+/;
	  next if m/^\s*#\s+Other Data/;
	  chomp;
	  if ( m/^\s*#\s+(\w\w(?:__\w+)?)$/ ) {
		my $Inst = $1;
		$Insts{$Inst} = {} unless defined $Insts{$Inst};
		$Insts{$Inst}->{$Date} = '.';
		next;
	  }
	  if ( m/^(\w\w(?:__\w+)?)(\s.*)?$/ ) {
		my $Inst = $1;
		my $fileinfo = <IFILE>; chop $fileinfo;
		$Insts{$Inst} = {} unless defined $Insts{$Inst};
		my $IStatus = '';
		if ( $fileinfo =~ m/#/ ) {
		  $IStatus = 'E'; # Error status
		} elsif ( $fileinfo =~ m/\S/ ) {
		  $IStatus = 'o'; # Included but no variables defined
		} else {
		  $IStatus = '-'; # Not present
		}
		$Insts{$Inst}->{$Date} = $IStatus;
		my $line = <IFILE>;
		$line =~ m/^\s*H(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/ ||
		  die "ERROR: NV line corrupted: $line\n";
		my ( $Ntophdr, $NV, $NAUXV, $NSCOML, $NNCOML ) =
				  ( $1, $2, $3, $4, $5 );
		my @dump;
		my @pri;
		my @aux;
		my @scom;
		my @ncom;
		Read_N_Lines( *IFILE{FILEHANDLE}, $Ntophdr, \@dump, 1 );
		Read_N_Lines( *IFILE{FILEHANDLE}, $NV, \@pri, 1 );
		Read_N_Lines( *IFILE{FILEHANDLE}, $NAUXV, \@aux, 1 );
		Read_N_Lines( *IFILE{FILEHANDLE}, $NSCOML, \@scom, 1 );
		Read_N_Lines( *IFILE{FILEHANDLE}, $NNCOML, \@ncom, 1 );
		while (<IFILE>) {
		  last if m/^$/;
		  m/^\s*(\d+)\s+(\w+)(\s+[(]([ASN]?\d+|D[^)]+)[)])?\s*(.+)?$/ ||
			die "ERROR: Logfile datum reference line did not match: $_\n";
		  my ( $arccol, $Datum ) = ( $1, $2 );
		  my $srccol = defined $4 ? $4 : '';
		  my $desc = '';
		  my $VStatus = ( $IStatus =~ m/[Xo]/ ) ? 'o' : '-';
		  
		  if ( $srccol =~ m/^([ASN])(\d+)$/ ) {
			my $code = $1;
			my $lno = $2;
			$VStatus = 'X';
			if ( $code eq 'A' ) {
			  $desc = $aux[$lno-1];
			} elsif ( $code eq 'S' ) {
			  $desc = $scom[$lno-1];
			} elsif ( $code eq 'N' ) {
			  $desc = $ncom[$lno-1];
			} else {
			  die "ERROR: srccol format: '$srccol'\n";
			}
		  } elsif ( $srccol =~ m/^\d+$/ ) {
			$desc = $pri[$srccol-1];
			$VStatus = 'X';
		  } elsif ( $srccol =~ m/^D(.*)$/ ) {
			$desc = $1;
			$VStatus = 'X';
		  }
		  $desc =~ s/^\s*//;
		  $desc =~ s/\s*$//;
		  $Vars{$Datum} = {} unless defined $Vars{$Datum};
		  $Vars{$Datum}->{$Date} = {
			desc => $desc,
			status => $VStatus,
			Inst => $Inst
		  };
		  $Vars{$Datum}->{Desc} = {} unless
		    defined $Vars{$Datum}->{Desc};
		  $Vars{$Datum}->{Inst} = {} unless
		    defined $Vars{$Datum}->{Inst};
		  $Vars{$Datum}->{Desc}->{$desc} = 1 if $desc;
		  $Vars{$Datum}->{Inst}->{$Inst} = 1;
		  if ( $VStatus eq 'X' && $IStatus eq 'o' ) {
		    $IStatus = 'X';
		    $Insts{$Inst}->{$Date} = $IStatus;
		  }
		  # print "$Date $Inst $Datum $arccol $srccol $desc\n";
		}
	  } else {
		die "Unexpected data in $Date log file: '$_'\n";
	  }
	}
	close IFILE || warn "Error closing log $flog\n";
  }
  
  # We've collected the mission data. Now summarize it.
  # $Mission/vars.html
  # table of variables by flight {
  #	   clo: ----oOX
  #	   Key: - = No file submitted
  #	        o = File submitted but var did not match
  #			O = var matched, but no data
  #			X = Data
  #	 }
  @Dates = sort @Dates;
  foreach my $node ( $Mission, "$Mission/tbl", "$Mission/txt" ) {
	my $path = "$HTMLRoot/$node";
	-d "$path" || mkdir $path, 0775 ||
	  die "Unable to create dir '$path'\n";
  }
  my $vfile = "$HTMLRoot/$Mission/tbl/vartbl.html";
  open( VARS, ">$vfile" ) ||
	die "Unable to write to $vfile\n";
  my @Vars = sort keys %Vars;
  print VARS
	"<HTML>\n<HEAD>\n",
	"<TITLE>\U$Mission Mission Variable Table</TITLE>\n";
  if ( open( BANNER, "<$arcdir/$Mission/banner.ehtml" ) ||
	   open( BANNER, "<$arcdir/banner.ehtml" ) ) {
	while (<BANNER>) {
	  print VARS;
	}
	close BANNER;
  } else {
	print VARS "</HEAD><BODY BGCOLOR=\"WHITE\">\n";
  }
  print VARS
	"<H2>\U$Mission\E Variable Table</H2>\n",
	"<table WIDTH=\"100%\"><tr><TD WIDTH=\"80%\">\n",
	"<table BORDER=1><tr><td>",
	"<table>",
	"<tr><td></td><td></td><TH COLSPAN=\"",
	scalar(@Dates),
	"\">Flight</th></tr>\n",
	"<TR BGCOLOR=\"#CAD0FF\">",
	"<TH BGCOLOR=\"White\" COLSPAN=2></th>\n";
  foreach my $Date ( @Dates ) {
	print VARS "<td>", join( "<BR>", split( //, $Date ) ), "</td>\n";
  }
  print VARS
	"</tr><tr><TH ALIGN=\"LEFT\">Var:</th><th>File:</th></tr>\n";
  foreach my $Var ( @Vars ) {
	print VARS
	  "<tr><TH BGCOLOR=\"#CAD0FF\">$Var</th>",
	  "<TD BGCOLOR=\"#CAD0FF\">",
	  join( "<BR>", sort keys %{$Vars{$Var}->{Inst}} ),
	  "</td>";
	foreach my $Date ( @Dates ) {
	  my $status = '-';
	  if ( defined $Vars{$Var}->{$Date} ) {
		$status = $Vars{$Var}->{$Date}->{status};
	  }
	  print VARS "<td>$status</td>";
	}
	print VARS "</tr>\n";
  }
  print VARS
	"</table></td></tr></table></td>\n",
	"<TD VALIGN=\"TOP\">",
	"<table BGCOLOR=\"#CCFFFF\" BORDER=1><tr><th>",
	"<a href=\"../../\">Getarc Homepage</a>",
	"</th></tr>",
	"<tr><th><a href=\"/cgi/archive?Mission=$Mission\">",
	"\U$Mission\E Summary</a></th></tr>\n",
	"<tr><td>Variable Table</td></tr>\n",
	"<tr><td><a href=\"filetbl.html\">File Table</a></td></tr>\n",
	"<tr><td><a href=\"varlist.html\">Variable List</a></td></tr>\n",
	"</table><br>\n",
	"<table><tr><th colspan=\"2\">Legend</th></tr>\n",
    "<tr><th>-</th><td>File Not Present</td></tr>\n",
    "<tr><th>o</th><td>Var Not Found</td></tr>\n",
    "<tr><th>X</th><td>Var Present</td></tr></table>\n",
	"</td></tr></table>\n";
  close VARS || warn "Error closing $vfile\n";
  $vfile =~ s,/tbl/,/txt/, && unlink $vfile;

  # list of variables with description(s)
  $vfile = "$HTMLRoot/$Mission/tbl/varlist.html";
  open( VARS, ">$vfile" ) ||
	die "Unable to write to $vfile\n";
  print VARS
	"<html>\n<head>\n",
	"<title>\U$Mission Mission Variable Table</title>\n";
  if ( open( BANNER, "<$arcdir/$Mission/banner.ehtml" ) ||
	   open( BANNER, "<$arcdir/banner.ehtml" ) ) {
	while (<BANNER>) {
	  print VARS;
	}
	close BANNER;
  } else {
	print VARS "</head><body BGCOLOR=\"WHITE\">\n";
  }
  print VARS
    "<table width=\"100%\"><tr>",
    "<td><h2>\U$Mission\E getarc variable list</h2></td>\n",
	"<td align=\"right\"><table BGCOLOR=\"#CCFFFF\" BORDER=1><tr><th>",
	"<a href=\"../../\">Getarc Homepage</a>",
	"</th></tr>",
	"<tr><th><a href=\"/cgi/archive?Mission=$Mission\">",
	"\U$Mission\E Summary</a></th></tr>\n",
	"<tr><td><a href=\"vartbl.html\">Variable Table</a></td></tr>\n",
	"<tr><td><a href=\"filetbl.html\">File Table</a></td></tr>\n",
	"<tr><td>Variable List</td></tr>\n",
	"</table></td></tr></table>\n",
	"<table BORDER=1 CELLPADDING=4><tr><th>Var</th><th>Inst</th>",
	"<th>Description(s)</th></tr>\n";
  foreach my $Var ( @Vars ) {
	my $descs = join( "<BR>", sort keys %{$Vars{$Var}->{Desc}} );
	$descs = "&nbsp;" unless $descs ne '';
	print VARS
	  "<tr><th>$Var</th><TD ALIGN=\"CENTER\">",
	  join( "<BR>", sort keys %{$Vars{$Var}->{Inst}} ),
	  "</td><td>$descs</td></tr>\n";
  }
  print VARS "</table>\n</body></html>\n";
  close VARS || warn "Error closing $vfile\n";
  $vfile =~ s,/tbl/,/txt/, && unlink $vfile;

  $vfile = "$HTMLRoot/$Mission/tbl/filetbl.html";
  open( VARS, ">$vfile" ) ||
	die "Unable to write to $vfile\n";
  print VARS
	"<html>\n<head>\n",
	"<title>\U$Mission\E getarc Variable Table</title>\n";
  if ( open( BANNER, "<$arcdir/$Mission/banner.ehtml" ) ||
	   open( BANNER, "<$arcdir/banner.ehtml" ) ) {
	while (<BANNER>) {
	  print VARS;
	}
	close BANNER;
  } else {
	print VARS "</head><body BGCOLOR=\"WHITE\">\n";
  }
  print VARS
	"<h2>\U$Mission\E File Table</h2>\n",
	"<table WIDTH=\"100%\"><tr><TD WIDTH=\"80%\">\n",
	"<table BORDER=1><tr><td>",
	"<table>",
	"<tr><td></td><TH COLSPAN=\"",
	scalar(@Dates),
	"\">Flight</th></tr>\n",
	"<TR BGCOLOR=\"#CAD0FF\">",
	"<TH BGCOLOR=\"White\"></th>\n";
  foreach my $Date ( @Dates ) {
	print VARS "<td>", join( "<BR>", split( //, $Date ) ), "</td>\n";
  }
  my @Inst = sort keys %Insts;
  print VARS
	"</tr><tr><th ALIGN=\"LEFT\">File:</th></tr>\n";
  foreach my $Inst ( @Inst ) {
	print VARS
	  "<tr><th BGCOLOR=\"#CAD0FF\">$Inst</th>";
	foreach my $Date ( @Dates ) {
	  my $status = '-';
	  if ( defined $Insts{$Inst}->{$Date} ) {
		$status = $Insts{$Inst}->{$Date};
	  }
	  print VARS "<td>$status</td>";
	}
	print VARS "</tr>\n";
  }
  print VARS
	"</table></td></tr></table></td>\n",
	"<TD VALIGN=\"TOP\">",
	"<table BGCOLOR=\"#CCFFFF\" BORDER=1><tr><th>",
	"<a href=\"../../\">Getarc Homepage</a>",
	"</th></tr>",
	"<tr><th><a href=\"/cgi/archive?Mission=$Mission\">",
	"\U$Mission\E Summary</a></th></tr>\n",
	"<tr><td><a href=\"vartbl.html\">Variable Table</a></td></tr>\n",
	"<tr><td>File Table</td></tr>\n",
	"<tr><td><a href=\"varlist.html\">Variable List</a></td></tr>\n",
	"</table><br>\n",
	"<table><tr><th colspan=\"2\">Legend</th></tr>\n",
    "<tr><th>-</th><td>Not Present</td></tr>\n",
    "<tr><th>.</th><td>Not Configured</td></tr>\n",
    "<tr><th>o</th><td>No Variables Defined</td></tr>\n",
    "<tr><th>E</th><td>Transfer Error</td></tr>\n",
    "<tr><th>X</th><td>Variables Present</td></tr></table>\n",
	"</td></tr></table>\n",
	"</body></html>";
  close VARS || warn "Error closing $vfile\n";
  $vfile =~ s,/tbl/,/txt/, && unlink $vfile;
}

sub Read_N_Lines {
  my ( $fh, $n, $cols, $fromhdr ) = @_;
  for my $i ( 1 .. $n ) {
	my $line = <$fh>;
	$line =~ s/\s+$/\n/;
	$line =~ s/^  // if $fromhdr;
	chop $line;
	push( @$cols, $line );
  }
}

__END__

Log file syntax:

LogFile : LogEntry*
LogEntry : NCols | InstHdr
NCols : ^\d+( Columns)?$
InstHdr : InstID FileInfo NLines TopHdrs Primary Auxiliary SComl
		  NComl ArcCol* Blank
NLines : ^\s*H(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)
  $1 = Ntophdr
  $2 = NV
  $3 = NAUXV
  $4 = NSCOML
  $5 = NNCOML
  
ArcCol : ^\s*(\d+)\s+(\w+)(\s+\((A?\d+)\))?\s*(.*)$
  $1 = archive column
  $2 = archive variable name
  $4 = source column number
  $5 = error explanation
Blank : ^$

@Missions
%GVars{$var}->{ Mission => {$mission => desc, },
			   desc => { $desc => 1 }
}
For each Mission
  @Dates
  @Insts => descs? (Manually download filetable.lis...)
  $Vars{$var} = { Date => { desc => desc, status =>, Inst => } }
  $Inst{$Inst} = { Date => IStatus }
