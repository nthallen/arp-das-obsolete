#! /bin/sh
# QNX 4.22 Installation over the network.
#__USAGE
#%C	[-LANWDufRl] [-d <driver> [-p <param>]] -t <target node>
#	-t <target node> specify target node (Required)
#	-L Set hardware clock using local time
#	-D Reserver memory for Rundos
#	-u Upgrade only: don't reinitialize the disk
#	-f Interactively set fdisk parameters
#	-d <driver> specify disk driver other than Fsys.ide
#	-p <driver parameters> specify driver parameters
#	-R Don't ask (Rambo mode)
#	-l Disk is very large: add a special boot partition
# Installs operating system from current node or SRCNODE
# if defined.
#

# History:
#  $Log$
# Revision 1.10  1995/10/17  17:44:41  nort
# Many changes to ease upgrades
#
# Revision 1.9  1995/04/24  21:27:35  nort
# Upped "Large" boot partition from 2m to 4m
# Load TZ.init before initial rtc
#
# Revision 1.8  1995/03/21  16:40:22  nort
# Queries the currently running Net.ether1000 for options
# Added Mouse and int10 to standard sysinit file
# Added nameloc -k1 to standard sysinit file
#
typeset UPGRADE LIBS_TOO FDISK TGTNODE DISKDRV DISKPARM LOCAL
typeset RUNDOS
typeset DosF DosQuote NetA NetN NetW Tinit Mouse Int10
typeset Dev DevCon DevSer DevPar FsysFl
typeset opts excl n j option isFlt notFlt
UPGRADE=no
FDISK=no
LARGE=no
RAMBO=no

DISKDRV=Fsys.ide
DISKPARM=-P
RUNDOS=""
LOCAL=""
while getopts "uUDd:p:t:fl" option; do
  case $option in
	[uU]) UPGRADE=yes;;
	d) DISKDRV=$OPTARG; DISKPARM="";;
	p) DISKPARM="$OPTARG";;
	t) TGTNODE=$OPTARG;;
	f) FDISK=yes;;
	l) LARGE=yes;;
	R) RAMBO=yes;;
	?) echo; exit 1;;
	*) echo Unsupported option: -$option; exit 1;;
  esac
done

[ -z "$SRCNODE" -a "$NODE" = "1" ] && SRCNODE=1
if [ -z "$SRCNODE" ]; then
  echo "No SRCNODE specified" >&2
  exit 1
fi

if [ -z "$TGTNODE" ]; then
  echo Must specify a target node >&2
  exit 1
fi

function hitanykey {
  if [ $RAMBO = no ]; then
	echo
	echo Continue? [Y/N/R]: \\c; read j
	case $j in
	  [nN]*) exit 1;;
	  [rR]*) export RAMBO=yes;;
	esac
  fi
}

#----------------------------------------------------------------
# query_config() looks for the currently running programs
# and outputs configuration to stdout for assignments
#  query_config program default_args
# example:
#  var=`query_config Net.ether1000 " -l2 -n2 -6 -s16"`
# The defaults are used if the program is not currently running.
# If no default args are specified and the program is not 
# currently running, the variable will be empty. If the defaults
# are specified and the program is not currently running,
# a sharp is prefixed, allowing the administrator to uncomment
# the definition if desired.
#
# The output does not include a trailing ampersand, since
# I don't have a way of determining if that is required or not.
# This approach will not work with all programs, since some
# may alter their command lines or fork. Others may require input
# redirection, which must be queried further
#----------------------------------------------------------------
function query_config {
  typeset prog
  echo Querying Current Configuration of $1 >&2
  prog=`sin -h -n $TGTNODE -P $1 format a 2>/dev/null`
  if [ -z "$prog" ]; then
	if [ -n "$2" ]; then
	  prog="# $1$2"
	  # echo "Configuration not found, using default: $prog" >&2
	else
	  prog=""
	fi
  fi
  echo $prog
}

echo QNX 4.22 Network Installation\\c
[ $UPGRADE = yes ] && echo " Upgrade\\c"
echo " to node $TGTNODE from node $SRCNODE"

#----------------------------------------------------------------
# Verify that configuration options are defined
#----------------------------------------------------------------
opts=`grep ^$TGTNODE: //$SRCNODE/etc/config/node.map | cut -f 9 -d:`
excl=${opts##*,}
opts=${opts%%,*}
[ -n "$opts" ] || {
  echo No configuration options for node $TGTNODE in //$SRCNODE/etc/config/node.map
  exit 1
}

case $opts in
  *E*) isFlt=""; notFlt="# ";;
  *)   isFlt="# "; notFlt="";;
esac

#----------------------------------------------------------------
# Check for netinstall options
#----------------------------------------------------------------
opts=`grep ^$TGTNODE: //$SRCNODE/etc/config/node.map | cut -f 10 -d:`
case $opts in
  *L*) LOCAL=" -l";;
esac
case $opts in
  *D*) RUNDOS=" -R 1";;
esac

#----------------------------------------------------------------
# Query configurations
#----------------------------------------------------------------
Dev=`sin -n $TGTNODE -P Dev -h format a | grep "Dev "`
DevCon=`query_config Dev.ansi " -n 4"`
DevSer=`query_config Dev.ser " "`
DevPar=`query_config Dev.par " "`
FsysFl=`query_config Fsys.floppy " "`
DosF=`query_config Dosfsys`
if [ -n "$DosF" ]; then
  DosQuote=""
else
  DosF="# Dosfsys "
  DosQuote="# "
fi
Mouse=`query_config Mouse`
if [ -n "$Mouse" ]; then
  Mouse="$Mouse <"`sin -n $TGTNODE -P Mouse -h fd |
	awk '/0 - / { print $3}'`
else
  Mouse="# Mouse </dev/ser1 "
fi
Int10=`query_config int10 " "`

# Net=`sin -n $TGTNODE -P Net -h format a | grep "Net "`
NetA=`query_config Net.arcnet " -s "`
NetN=`query_config Net.ether1000 " -l2 -n2 -6 -s16 "`
NetW=`query_config Net.ether8003 " -l2 -n2 "`

if [ -z "$isFlt" ]; then
  Tinit='tinit -c "/bin/login -f flight" -t /dev/con1 '
else
  Tinit=`query_config tinit " -T /dev/con* -t /dev/con1 "`
fi

#----------------------------------------------------------------
# Shutdown interactive operations on the target node
#----------------------------------------------------------------
echo Shutting down interactive operations on node $TGTNODE
on -n $TGTNODE slay -f tinit login
if [ -f //1/usr/local/lib/src/upgrade.fld ]; then
  for i in //$TGTNODE/dev/con*; do
	scrpaint -v //1/usr/local/lib/src/upgrade > $i
  done
  stty +fix +edit
else
  echo Notification screen is missing
  for i in //$TGTNODE/dev/con*; do
	echo \\f\\n\\n\\nSystem undergoing upgrade > $i
	echo \\n\\n\\nPlease do not disturb > $i
  done
fi

#----------------------------------------------------------------
# Check to see that we can talk to the remote node
#----------------------------------------------------------------
sin -n$TGTNODE info >/dev/null || exit 1

# export TZ=est05edt04,M4.1.0/2,M10.5.0/2
sin -n $TGTNODE -P /bin/date 2>/dev/null | grep /bin/date >/dev/null || {
  echo Starting clock
  on -n $TGTNODE -t //$TGTNODE/dev/con1 clock -b cyan -f bwhite "+%D %r"
}

echo Setting time from node $NODE
rtc -s net $TGTNODE
on -n $TGTNODE rtc$LOCAL -s hw
hitanykey

#----------------------------------------------------------------
# Install the file system if it isn't already
#----------------------------------------------------------------
namewait -n $TGTNODE -t 0 qnx/fsys 2>/dev/null || {
  echo Installing File System on node $TGTNODE
  on -n $TGTNODE -t //$TGTNODE/dev/con1 Fsys
}

#----------------------------------------------------------------
# Install the driver if it isn't already
#----------------------------------------------------------------
if [ ! -b //$TGTNODE/dev/hd0 ]; then
  echo Installing Disk Driver $DISKDRV on node $TGTNODE
  on -n $TGTNODE -t //$TGTNODE/dev/con1 $DISKDRV $DISKPARM
  while [ ! -b //$TGTNODE/dev/hd0 ]; do
	echo Waiting for //$TGTNODE/dev/hd0 to appear...
	sleep 2
  done
fi

#----------------------------------------------------------------
# Initialize the disk unless upgrading
#----------------------------------------------------------------
if [ $UPGRADE != yes ]; then
  if [ $FDISK = yes ]; then fdisk //$TGTNODE/dev/hd0
  else
	[ $LARGE = yes ] && fdisk //$TGTNODE/dev/hd0 ADD QNZ 4m
	fdisk //$TGTNODE/dev/hd0 ADD QNX ALL
  fi
  fdisk //$TGTNODE/dev/hd0 show
  hitanykey

  on -n $TGTNODE mount -p //$TGTNODE/dev/hd0
  if [ $LARGE = yes ]; then
	dinit -hq //$TGTNODE/dev/hd0t79
	on -n $TGTNODE mount //$TGTNODE/dev/hd0t79 //$TGTNODE/hd0
	on -n $TGTNODE dcheck -m //$TGTNODE/hd0
    hitanykey
  fi
  dinit -hq //$TGTNODE/dev/hd0t77
  on -n $TGTNODE mount //$TGTNODE/dev/hd0t77 //$TGTNODE/hd
  on -n $TGTNODE dcheck -m //$TGTNODE/hd
  hitanykey
  echo Modifying the prefix table for node $TGTNODE
  on -n $TGTNODE prefix -R /=//$TGTNODE/hd
  prefix -n$TGTNODE
  fullpath //$TGTNODE/
else
  if [ ! -b //$TGTNODE/dev/hd0t77 ]; then
	on -n $TGTNODE mount -p //$TGTNODE/dev/hd0 //$TGTNODE/dev/hd0t77 //$TGTNODE/hd
	on -n $TGTNODE prefix -R /=//$TGTNODE/hd
  fi
  # Would like to check to make sure I am modifying the right thing
  echo Please verify that I am addressing the correct disk:
  fullpath //$TGTNODE/
  hitanykey
  echo Installing new bootstrap loader
  dinit -hb //$TGTNODE/dev/hd0t77
fi

#----------------------------------------------------------------
# Copy over file systems via osupdate
#----------------------------------------------------------------
echo Ready to begin file copying
hitanykey

osupdate -f os.422 $SRCNODE $TGTNODE
hitanykey
osupdate -f osu.win $SRCNODE $TGTNODE
hitanykey
if [ $TGTNODE != 1 ]; then
  osupdate 1 $TGTNODE
  hitanykey
fi

#----------------------------------------------------------------
# Perform configuration
#----------------------------------------------------------------
typeset sysinit
cd //$TGTNODE/etc/config
sysinit=sysinit.$TGTNODE
[ -f $sysinit ] && sysinit=sysinit.u

pwd
echo Creating $sysinit
cat > $sysinit <<-END_OF_FILE
#----------------------------------------------------------------
# Sysinit for Node $TGTNODE booting from disk
#----------------------------------------------------------------
set -i
${isFlt}export TZ=utc00
${notFlt}export TZ=est05edt04,M4.1.0/2,M10.5.0/2
${notFlt}[ -x /etc/config/TZ.init ] && . /etc/config/TZ.init
rtc$LOCAL hw
${Dev} &
${DevCon} &
${DevSer} &
${DevPar} &

reopen //0/dev/con1
set -- \`fullpath \$0\`
echo Booting Node \$NODE from disk \(\$3\)

emu87 &
${FsysFl} &
${DosF} &
${DosQuote}echo Waiting for Dosfsys to initialize...
${DosQuote}while [ ! -d /dos/c ]; do sleep 2; done
${DosQuote}echo Continuing

#----------------------------------------------------------------
# Start up the QNX Network
#----------------------------------------------------------------
Net &
netmap -f
${NetA} &
${NetN} &
${NetW} &

#----------------------------------------------------------------
# Start our nameloc or wait for the server's
#----------------------------------------------------------------
${isFlt}nameloc &
${notFlt}echo Asking for nameloc acknowledgement from Node 1...
${notFlt}nameloc -w -k1

#----------------------------------------------------------------
# Start up Mouse and/or Graphics Drivers
#----------------------------------------------------------------
${Mouse}&
${Int10}&

#----------------------------------------------------------------
# Perform remote initializations
#----------------------------------------------------------------
${notFlt}if test -f //1/etc/update_net; then //1/etc/update_net; fi
${notFlt}[ -x /etc/config/TZ.init ] && . /etc/config/TZ.init
${notFlt}if [ -d //1/etc ]; then
${notFlt}  echo Setting Time from Network
${notFlt}  rtc net 1
${notFlt}  rtc$LOCAL -s hw
${notFlt}fi
${notFlt}clock -b cyan -f bwhite "+%D %r" &
${notFlt}freeze -cdz /etc/logo.F
${Tinit}&
END_OF_FILE

echo Transferring licenses
license //${SRCNODE:-1}/etc/licenses //$TGTNODE/etc/licenses
hitanykey

echo \\nCreating a boot image
typeset PROC32 image
cpu=`sin -n$TGTNODE -h net | cut -c 13-15`
case $cpu in
  386) PROC32=yes;;
  486) PROC32=yes;;
  586) PROC32=yes;;
  *)   PROC32=no;;
esac
if [ $PROC32 = yes ]; then image=hard32.$TGTNODE
else image=hard16.$TGTNODE
fi
cd //$TGTNODE/boot/build
if [ -f $image ]; then mv -vf $image $image.old; fi
if [ $PROC32 = yes ]; then

#--------------------------------
# Intro to the 32-bit OS version
#--------------------------------
cat >$image <<-END_OF_FILE
sys/Proc32
\$ 52000 Proc32 -l $TGTNODE$RUNDOS

sys/Slib16
\$ 1 Slib16

sys/Slib32
\$ 1 Slib32

END_OF_FILE

else

#--------------------------------
# Intro to the 16-bit OS version
#--------------------------------
cat >$image <<-END_OF_FILE
sys/Proc16
\$ 44000 Proc16 -l $TGTNODE$RUNDOS

sys/Slib16
\$ 1 Slib16

END_OF_FILE

fi


#--------------------------------
# Common stuff:
#--------------------------------
cat >>$image <<-END_OF_FILE
/bin/Fsys
\$ 8000 Fsys

/bin/$DISKDRV
\$ 1000 $DISKDRV $DISKPARM

/bin/mount
\$ 1000 mount -p \$h \$ht77 /

/bin/sinit
\$ 1000 sinit  TERM=qnx
END_OF_FILE

cd //$TGTNODE/boot
make b=$image d=$DISKDRV
if [ $LARGE = yes ]; then
  cp //$TGTNODE/hd0/.boot //$TGTNODE/hd0/.altboot
  cp images/$image //$TGTNODE/hd0/.boot

  fdisk //$TGTNODE/dev/hd0 loader
  fdisk //$TGTNODE/dev/hd0 boot QNZ
else
  cp //$TGTNODE/.boot //$TGTNODE/.altboot
  cp images/$image //$TGTNODE/.boot

  fdisk //$TGTNODE/dev/hd0 loader
  fdisk //$TGTNODE/dev/hd0 boot QNX
fi

echo \\n\\nInstallation of QNX 4.22 Completed\\n\\n
