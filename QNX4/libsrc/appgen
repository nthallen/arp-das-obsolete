#! /bin/sh
# appgen Application Generator for the
# tmc/cmdgen/tmcalgo/etc family of compilers
#__USAGE
#%C	[spec file]
#	Generates an application based on the spec_file input
#	If spec file isn't specified, appgen will look for a
#	file of the form *.spec. If there is a unique one, it
#	will be used.
#	appgen automatically overwrites the Makefile, so care
#	should be taken that it is not invoked where it is not
#	used.
#
# Spec_file format:
# # comment line
# prefix = <prefix>  (optional: derived from spec file name)
# tmcbase = <files>
# cmdbase = <files>
# var = substitution (supported vars are SRC TOOL OBJ TGT
#                     MNC (defaults to prefix)
#                     HOMEDIR (defaults to cwd, less node)
# target : <files>
# ...

typeset ifile
if [ -n "$1" ]; then
  if [ -r $1 ]; then ifile=$1
  else
	echo Cannot find or read input file $1 >&2
	exit 1
  fi
else
  for i in *.spec; do
	if [ -r $i ]; then
	  if [ -n "$ifile" ]; then
		echo More than one .spec file found: *.spec >&2
		exit 1
	  else ifile=$i
	  fi
	fi
  done
fi

if [ -z "$ifile" ]; then
  echo No .spec file specified and none found >&2
  exit 1
fi

if [ -f Makefile -a Makefile -nt $ifile ]; then
  echo Makefile is up to date relative to $ifile
  exit 0
fi

#----------------------------------------------------------------
# Now redirect standard input and output to process the spec file
#----------------------------------------------------------------
exec <$ifile >Makefile

typeset targets prefix tmcbase cmdbase basetargets usage LINK usefiles

# is_member setname member
function is_member {
  typeset i set
  eval set=\"\$$1\"
  if [ -n "$set" ]; then
	for i in $set; do
	  if [ "$2" = "$i" ]; then return 0; fi
	done
  fi
  return 1
}

# add_member setname member
# returns true (0) if member was not in set
# returns false (1) if member was in set
function add_member {
  if is_member $1 $2; then
	return 1
  else
	eval $1=\"\$$1 \$2\";
  fi
  return 0
}

function set_depname {
  typeset old prefix suffix
  old=$1
  while :; do
	prefix=${old%%[./]*}
	if [ $old = $prefix ]; then break; fi
	eval suffix=\${old#$prefix[./]}
	old=${prefix}_$suffix
  done
  eval prefix=\"\$n_$old\"
  if [ -n "$prefix" ]; then
	if [ $prefix != $1 ]; then
	  echo Name kludge conflict between $1 and $prefix >&2
	  exit 1
	fi
  else
	eval n_$old=$1
  fi
  depname=d_$old
}

# def_target target dependents
function def_target {
  typeset tgt deps dtdeps btgt
  tgt=$1; shift
  deps="$*"
  btgt=`basename $tgt`
  if [ ! $btgt = $tgt ]; then
	echo Target $tgt is in another directory. >&2
	exit 1
  fi
  if is_member SRC $tgt; then
	echo Target $tgt conflicts with previous source definition >&2
	exit 1
  fi
  if add_member targets $tgt; then
	if [ -n "$basetargets" ]; then OBJ="$OBJ $tgt"; fi
	set_depname $tgt
	eval $depname=\"\$deps\"
  else
	set_depname $tgt
	eval dtdeps=\"\$$depname\"
	if [ "$dtdeps" != "$deps" ]; then
	  echo Dependencies for target $tgt conflict with previous definition >&2
	  echo First: \"$dtdeps\" >&2
	  echo Second: \"$deps\" >&2
	  exit 1
	fi
  fi
}

function def_source {
  typeset bsrc
  
  if is_member targets $1; then
	echo Source File $1 previously identified as target. >&2
	exit 1
  fi
  bsrc=`basename $1`
  if [ $bsrc = $1 ]; then
	add_member SRC $1
  fi
}

#----------------------------------------------------------------
# This is where we read in the definitions
#----------------------------------------------------------------
while read tgt mode deps; do
  case "$tgt" in
	\#*) mode=#;;
  esac
  if [ -n "$mode" ]; then
	case "$mode" in
	  \#) : ;;
	  =) eval $tgt=\"\$deps\";;
	  :) case $tgt in
		   *col) deps="$tmcbase $deps";;
		   *ext) deps="$tmcbase $deps";;
		   *disp) deps="$tmcbase $deps";;
		   *clt) deps="$cmdbase $deps";;
		   *srvr) deps="$cmdbase $deps";;
		   *.dccc) : ;;
		   *.sft) : ;;
		   *) echo Unrecognized target type: $tgt >&2; exit 1;;
		 esac
		 for i in $deps; do
		   def_source $i
		 done
		 def_target $tgt $deps;;
	  *) echo Unknown mode $mode >&2 ;;
	esac
  fi
done

#----------------------------------------------------------------
# If not otherwise defined, the following targets are implicit,
# assuming appropriate source files are supplied in the BASE
# definition
#  ${prefix}col
#  ${prefix}clt
#  ${prefix}srvr
#----------------------------------------------------------------
if [ -z "$prefix" ]; then prefix=${ifile%%.*}; fi
if [ -n "$tmcbase" ]; then
  until is_member targets ${prefix}col; do
	def_target ${prefix}col $tmcbase
	for i in $tmcbase; do def_source $i; done
  done
fi

if [ -n "$cmdbase" ]; then
  until is_member targets ${prefix}clt; do
	def_target ${prefix}clt $cmdbase
	for i in $cmdbase; do def_source $i; done
  done
  until is_member targets ${prefix}srvr; do
	def_target ${prefix}srvr $cmdbase
	for i in $cmdbase; do def_source $i; done
  done
fi

#----------------------------------------------------------------
# replace_each from to rule dependents
#   Processes the list of dependents, replacing any ending in
#	the "from" pattern with a new dependent ending in the "to"
#	pattern. Adds the new dependent as a target in its own right
#	with the old dependent as a dependent.
# Returns TRUE if the substitution was applied
#----------------------------------------------------------------
function replace_each {
  typeset from to redeps rei ia new_i replaced

  replaced=1
  from=$1; to=$2; rule="$3"; shift; shift; shift
  for rei in $*; do
	ia=${rei%$from}
	if [ $ia$from = $rei ]; then
	  new_i=${ia##*/}$to
	  if [ -n "$rule" ]; then rei="$rei\n\t$rule $rei"; fi
	  def_target $new_i " $rei"
	  rei=$new_i
	  replaced=0
	fi
	redeps="$redeps $rei"
  done
  deps="$redeps"
  return $replaced
}

#----------------------------------------------------------------
# replace_all from to rule dependents
#  replace all files ending in the "from" pattern with a file
#  of the name "to", suffixing the rule to the dependents list
# Returns TRUE if the substitution was applied.
#----------------------------------------------------------------
function replace_all {
  typeset from to rule rai ia ra_deps new_deps replaced
  
  replaced=1
  from=$1; to=$2; rule="$3"; shift; shift; shift
  for rai in $*; do
	ia=${rai%$from}
	if [ $ia$from = $rai ]; then
	  if [ -z "$ra_deps" ]; then
		new_deps="$new_deps $to"
	  fi
	  ra_deps="$ra_deps $rai"
	else
	  new_deps="$new_deps $rai"
	fi
  done
  if [ -n "$ra_deps" ]; then
	def_target $to "$ra_deps\n\t$rule$ra_deps"
	replaced=0
  fi
  deps=$new_deps
  return $replaced
}

#----------------------------------------------------------------
# Now process the definitions:
#  save the original targets in basetargets
#----------------------------------------------------------------
basetargets="$targets"

for i in $basetargets; do
  unset usage
  set_depname $i
  eval deps=\"\$$depname\"
  replace_each tmc.prt .tmc "\$(PRT2TMC)" $deps
  replace_each cmd.prt .cmd "\$(PRT2CMD)" $deps
  replace_each ext.prt .edf "\$(PRT2EDF)" $deps
  replace_each .edf ext.tmc "\$(EDF2EXT)" $deps
  if replace_all .fld $i.tmc "\$(FLD2DISP)" $deps; then
	add_member usage nl_cons
  fi
  case $i in
	*col) if replace_all .tmc $i.c "\$(TMC.col)" $deps; then
			add_member usage dg
			add_member DISTRIB ${i%col}.pcm
			add_member DISTRIB tm.dac
		  fi;;
	*)    if replace_all .tmc $i.c "\$(TMC)" $deps; then
			add_member usage dc; fi;;
  esac
  if replace_all .cmd ${prefix}cmd.c "\$(CMDGEN)" $deps; then
	add_member OBJ ${prefix}cmd.dat
  fi
  case $i in
	*clt) if replace_all cmd.c $i.o "\$(COMPILE.clt)" $deps; then
			add_member usage client; fi;;
	*srvr) replace_all cmd.c $i.o "\$(COMPILE.srvr)" $deps;;
  esac
  replace_each .c .o "" $deps

  unset LINK
  case $i in
	*col)   add_member usage msg; LINK=priv;;
	*ext)   add_member usage msg; LINK=ext;;
	*disp)  add_member usage msg; LINK=norm;;
	*clt)   add_member deps cltmain.o
			def_target cltmain.o " \$(LIBSRC)/cltmain.c"
			add_member usage msg; LINK=norm;;
	*srvr)  add_member deps "srvmain.o"
			def_target srvmain.o " \$(LIBSRC)/srvmain.c"
			add_member usage msg; LINK=priv;;
	*.dccc) por="\$(LIBSRC)/dccc.por"
			deps="$deps $por\n\t\$(DCCC)$deps $por$deps";;
	*.sft)	deps="$deps\n\tsolfmt -o$i $deps";;
  esac
  
  if [ $LINK ]; then
	unset usefiles
	for j in $usage; do
	  usefiles="$usefiles \$(USE)/$j.txt"
	done
	deps="$deps$usefiles\n\t\$(LINK.$LINK)$deps"
	deps="$deps\n\t\$(USAGE)$usefiles"
	if [ $LINK = priv ]; then deps="$deps\n\tpromote $i"; fi
  fi

  set_depname $i
  eval $depname=\"\$deps\"
done

#----------------------------------------------------------------
# Clean up a little
#----------------------------------------------------------------
unset -f replace_each replace_all

# output_macro name definition
# outputs name=definition, but adds continuation characters
# to make it look nice (eventually)
function output_macro {
  typeset name i line
  name=$1; shift
  echo -n "$name="
  width=${#name}+1
  for i in $*; do
	let width=$width+${#i}+1
	if [ $width -ge 70 ]; then
	  echo -n "$line\n$name+="
	  width=${#name}+2+${#i}
	  line=$i
	elif [ -n "$line" ]; then line="$line $i"
	else line="$i"
	fi
  done
  echo "$line"
}

#----------------------------------------------------------------
# Add a few more.
#----------------------------------------------------------------
add_member TOOL $ifile
add_member TOOL Makefile
directory=$PWD
case $directory in
  //*/*) directory=/${PWD#//*/};;
esac

#----------------------------------------------------------------
# Output the results
#----------------------------------------------------------------
echo "# Makefile Generated `date`"
output_macro MNC ${MNC:-$prefix}
output_macro HOMEDIR ${HOMEDIR:-$directory}
if [ -n "$SUBDIRS" ]; then
  output_macro SUBDIRS $SUBDIRS
fi
output_macro SRC $SRC
output_macro TOOL $TOOL
output_macro OBJ $OBJ
output_macro TGT $basetargets
output_macro DISTRIB $DISTRIB
echo "SOURCE=\$(SRC) \$(TOOL)"
echo "OBJECT=\$(OBJ) *.err"
echo "TARGET=\$(TGT) \$(DISTRIB)"

# Output selected macros if they have been defined
if [ -n "$TGTNODE" ]; then ehco TGTNODE=$TGTNODE; fi
if [ -n "$TGTDIR" ]; then echo TGTDIR=$TGTDIR; fi

echo "include /usr/local/lib/src/appgen.mk"
echo
echo "all : \$(TGT)"
echo "distribution : \$(TARGET)"
echo "\tsu root -c \"cp -vpn \$(TARGET) \$(TGTDIR)\"\n"

for i in $targets; do
  set_depname $i
  eval deps=\"\$$depname\"
  echo "$i :$deps"
done
