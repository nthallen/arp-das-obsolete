#! /bin/sh
#__USAGE
#%C	<srcnode> <tgtnode>

typeset debug="no"

################################################################
# (This usage info is basically obsolete. update_host
# does not copy files, but writes them into archives.)
# Latest version places the archive, message_file, manifest.$tgt
# and setup in the current directory.
#
# Body of the procedure:
# %C	<srcnode> <tgtnode>
#
# Reads command lines from stdin
# Writes error codes to stderr
# Commands:
#  /[+] <directory> <perms> <owner>
#    Create the directory on the target node if necessary.
#    cd to the directory on the source node
#  <category code> <filename> <special flags>
#    Assuming directories are OK, copy the specified file
#    using the standard options: default is copy only if
#    newer, preserving permissions and verbose:  cp -fpvn
#    For thorough update, might use cp -fpv. -f forces
#    symbolic links to be removed before a file is copied.
################################################################
typeset src=$1 tgt=$2
typeset tgtdir srcdir catcode fname flags owner severity=0
typeset timefile file paxfile listfile

if [ -z "$tgt" -a -n "$src" ]; then
  tgt="$src"
  src=""
else
  if [ -z "$src" -o -z "$tgt" ]; then
	echo "update_node: Missing source ($src) or target ($tgt) definition" >&2
	exit 1
  fi
  if [ ! -d //$src/ ]; then
	echo Source node //$src/ unreachable >&2
	exit 1
  fi
fi
tgt=`echo $tgt | tr [A-Z] [a-z]`
paxfile=$tgt.pax
listfile=manifest.$tgt

if [ -n "$src" ]; then
  timefile=//$src/etc/config/update.$tgt
  [ -f $timefile ] && timed="-newer $timefile"

  cat >message_file <<-THE_END




             Harvard University Atmospheric Research Project

                    Data Acquisition Architecture

                        Installation Package






THE_END
  message_file=yes

  while read catcode fname flags owner; do
	if [ -n "$message_file" ]; then
	  echo "message_file"
	  unset message_file
	fi
	case $catcode in
	  #*) :;;
	  \/*)
		echo //$src$fname
		tgtdir=$fname/; srcdir=//$src$fname/;;
	  *)
		case $flags in
		  *P*)
			;;
		  *[S]*)
			# linked files (not supported?)
			echo Error: $srcdir$fname linked via $flags in host update >&2
			severity=1;;
		  *[Hs]*)
			# These ones should be handled by pax OK
			echo $srcdir$fname;;
		  *)
			# we ignore the soft link with regular files
			# just output the file if it meets the criteria?
			for file in $srcdir$fname; do
			  if [ -d "$file" ]; then
				find $file -type f $timed
				find $file -type f $timed -perm -u+rws -print >>setup
			  elif [ -f "$file" ]; then
				if [ -z "$timed" -o "$file" -nt $timefile ]; then
				  echo $file
				  find $file -type f -perm -u+rws -print >>setup
				fi
			  fi
			done;;
		esac;;
	esac
  done >$listfile
  if [ -s setup ]; then
	echo "setup" >>$listfile
	awk '{sub("^//[0-9]*",""); print "/bin/chmod o-rw,u+s " $1}' setup >setup.tmp
	mv -f setup.tmp setup
	chmod a+x setup
  else
	rm -f setup
  fi

  touch $timefile

elif [ ! -f $listfile ]
  echo "Listing file $listfile not found" >&2
  exit 1
fi

pax -wv -s,//$src,, -s,message_file,/dev/tty, < $listfile > $paxfile

freeze -f $paxfile

echo Archive written to $paxfile.F

exit $severity
