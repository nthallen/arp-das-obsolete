# This is the boilerplate doit script invoked by "." execution
# from doit scripts generated by mkdoit2
# Note that this script assumes you are running on the local
# machine, specifically that /dev/con == $NODE/dev/con.
# This assumption is used in several places.
# If I pick out the node from `tty`, then that node should
# be used for all condev questions.

typeset winrunning=no _scrptname=$0
typeset Experiment HomeDir FlightNode wait_for_node
typeset gcpid _scr0 doit_not doit_stop _scrdefs
typeset condev

namewait -t0 qnx/screen 2>/dev/null && winrunning=yes
if [ $winrunning = yes ] && [ -x /windows/bin/Notice ]; then
  function nl_error {
	Notice -Eat "$_scrptname" $* >&2
	[ -n "$gcpid" ] && getcon -q $gcpid
	exit 1
  }
else
  function nl_error {
	echo "$_scrptname: $*" >&2
	[ -n "$gcpid" ] && getcon -q $gcpid
	exit 1
  }
fi

if [ -t 0 ]; then
  condev=`tty`
  condev=${condev%%[0-9]}
  connode=`expr "$condev" : '^//\([0-9]*\)/'`
else
  connode=$NODE
fi

if [ $winrunning = yes ]; then
  if test $QW_WIN_DEV; then
	condev=//$connode/$QW_WIN_DEV
  elif ( sin -n $connode ver | grep Dev32 > /dev/null 2>&1 ); then
	condev=//$connode/D16/win
  else
	condev=//$connode/dev/win
  fi
  [ ! -c ${condev}1 ] && on -f $connode /windows/bin/wterm true
  [ ! -c ${condev}1 ] && nl_error Unable to start $condev
fi

cd `dirname $0`
cfile=Experiment.config
[ ! -f "$cfile" ] && nl_error Cannot locate $cfile
. $cfile
[ -z "$Experiment" ] && nl_error Experiment undefined in $cfile
export Experiment
[ -n "$FlightNode" ] && export FlightNode
[ -n "$PlayBack" ] && {
  Experiment=$Experiment.PB
  FlightNode=$NODE
}
[ -n "$InetDoit" ] && {
  RemEx=$Experiment
  Experiment=$Experiment.IN
  FlightNode=$NODE
  [ -n "$RemoteHost" ] || nl_error RemoteHost undefined
}

while getopts "W" option; do
  case $option in
	W) _scrdefs="yes";;
	\?) echo; exit 1;;
	*) echo Unsupported option: -$option; exit 1;;
  esac
done
let sval=$OPTIND-1
shift $sval

for i in ; do
  case $i in
    not) doit_not=yes;;
    stop) doit_stop=yes;;
    wait) wait_for_node=yes;;
    *) : ;;
  esac
done

if [ -n "$doit_not" -o -n "$doit_stop" ]; then
  [ -z "$_scrdefs" -a $winrunning = yes ] &&
	exec on -t $condev $0 -W $*

  _scr0=`tty`
  [ $winrunning = yes ] && winsetsize $_scr0 8 45 `basename $0`

  [ -n "$doit_not" ] && {
	echo Deterring Startup of Experiment $Experiment
	echo Waiting for pick_file
	pick_file /dev/null
	[ -n "$gcpid" ] && getcon -q $gcpid
	exit 0
  } > $_scr0 2>&1

  [ -n "$doit_stop" ] && {
	if [ -z "$FlightNode" ]; then
	  FlightNode=`namewait -n0 -t0 -G parent 2>/dev/null`
	  if [ -z "$FlightNode" ]; then
		[ -n "$gcpid" ] && getcon -q $gcpid
		nl_error Unable to locate flight node for experiment $Experiment
	  fi
	fi
	echo Shutting down Experiment $Experiment on Node $FlightNode
	on -f $FlightNode /usr/local/bin/startdbr quit
	[ -n "$gcpid" ] && getcon -q $gcpid
	exit 0
  } > $_scr0 2>&1
fi

# start_rtg <script file>
function start_rtg {
  if [ $winrunning = yes ]; then
	namewait -t0 huarp/rtg 2>/dev/null || {
	  #generate a real config file here!
	  [ ! -f $1 ] && {
		echo "PO RP \"\""
		echo "PC APC $1"
		echo "PA"
	  } > $1
	  # if $connode != $NODE, this won't work...
	  # we should run rtg on $connode and tell the ext app
	  # to look for it there, but rtgapi.c doesn't support
	  # that (yet). Alternately need to tell rtg the global
	  # name of the winserver on $connode, but we don't
	  # know that either.
	  on -t //$connode/dev/con1 /windows/apps/rtg/rtg -f $1
	}
  fi
}

_scr0=`tty`

typeset _msgopts _dcopts _cmdopts

[ -n "$PlayBack" -a ! -d "$1" ] &&
  nl_error "Playback requires a directory argument"
