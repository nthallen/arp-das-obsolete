#! /bin/sh
# transfer is designed to transfer flight data from a remote system
# to the local directory, archive it and perform reduction on it.
#
# Obvious extensions include specifying whether or not to
# Copy, Archive or Reduce. Also, more checking of directories might
# be appropriate.

#__USAGE
#%C <remote dir>
#   <remote dir> is the remote source directory in rcp format
#	fld_transfer requires Experiment.config, in which
#	Experiment, HomeDir and DiskID must be defined.
#	shown or as an environment variable.  DiskID is a
#	string which must match the contents of the file ".disk.id"
#	found in the root directory of the optical disk.
#	OD_NODE may also be defined to override the default of 1.
#
#	fld_transfer recursively copies the target directory into
#	a subdirectory of the Experiment's home directory, then
#	archives that data to the appropriate optical disk. For
#	the optical archiving to work, the optical disk must be
#	mounted (read-only) before this operation begins. Since
#	this operation is intended to work unattended, I have
#	added some checking to make sure the archive is written
#	to the correct optical disk.

typeset HomeDir source target i id drive status_msg status_code

status_code='Completed'

function stat_msg {
  echo fld_transfer: $* >&2
  status_msg="$status_msg\n$*"
}

function err_msg {
  stat_msg $*
  status_code='Error'
}

function fail_msg {
  stat_msg "fld_transfer: $*"
  echo "$status_msg" | elm -s "$target" `id -un`
  exit 1
}

#----------------------------------------------------------------
# Load the configuration
#----------------------------------------------------------------
cfile=Experiment.config
[ ! -f "$cfile" ] && fail_msg Unable to locate configuration file $cfile
. $cfile
[ -z "$Experiment" ] && fail_msg Experiment undefined in $cfile
[ -d "$HomeDir" ] || fail_msg Unable to locate home directory $HomeDir
# [ -z "$DiskID" ] && fail_msg DiskID undefined in $cfile
[ -z "OD_NODE" ] && OD_NODE=1
export Experiment

#----------------------------------------------------------------
# parse the arguments
#----------------------------------------------------------------
for source in ; do
  case $source in
	*:*) host=${source%%:*};dir=${source#*:};;
	*) host=$RemoteHost;dir=$source;;
  esac
  [ -z "$host" -a -z "$RemoteHost" ] &&
	fail_msg RemoteHost not defined
  case $dir in
	\/*) : ;;
	*) dir=$HomeDir/$dir;;
  esac
  source=$host:$dir
  sources="$sources $source"
done

#----------------------------------------------------------------
# Copy the data
#----------------------------------------------------------------
for source in $sources; do
  target=${source##*$HomeDir/}
  if [ -d "$target" ]; then
	stat_msg Data already transferred
	targets="$targets $target"
  else
	stat_msg Beginning transfer of $source to $target
	if rcp -p -r $source $target; then
	  targets="$targets $target"
	else
	  err_msg rcp $source $target failed
	fi
  fi
done

[ -n "$targets" ] || fail_msg "No complete data sets transferred"

#----------------------------------------------------------------
# Archive the data to optical
#----------------------------------------------------------------
tgtloc=''
if [ -n "$DiskID" ]; then
  drive=""
  for j in //$OD_NODE/dev/od[0-9]; do
	i=${j##//$OD_NODE/dev/}
	echo "Drive = $j or $i"
	if [ -f //$OD_NODE/$i/.disk.id ]; then
	  id="`cat //$OD_NODE/$i/.disk.id`"
	  echo "id is $id"
	  [ "$id" = "$DiskID" ] && drive=$i && break
	fi
  done

  if [ -z "$drive" ]; then
	err_msg Unable to locate $DiskID disk: Skipping archive
  else
	odout -e $drive
	if archive -$drive -c1 -q $targets; then
	  tgtloc="//$OD_NODE/$drive$HomeDir/"
	  stat_msg archive $target completed successfully
	else
	  err_msg archive returned an error
	fi
  fi
else
  stat_msg Skipping archive of $target
fi

#----------------------------------------------------------------
# Perform reduce operations
#----------------------------------------------------------------
for target in $targets; do
  if reduce $tgtloc$target; then
	stat_msg Transfer and reduce of $tgtloc$target completed
  else
	err_msg Reduce $tgtloc$target failed
  fi
done
echo "$status_msg" | elm -s "$status_code$targets" `id -un`
