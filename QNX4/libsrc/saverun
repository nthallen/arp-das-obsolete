#! /bin/sh
#__USAGE
#%C
#	Saves data files, log files and other pertinent info in
#	a new directory named after the current date and the run
#	number.
#
#	Saverun must be able to read the experiment configuration
#	file Experiment.config, usually located in the GSE and
#	flight directories.
#
#	If the variable "FixDisk" is defined to "yes", fixdisk is
#	run on the disk before the new directory is created.

# Saverun locates the flight directory and does its work
# there, then returns to the current directory. Care is taken
# to perturb the environment as little as possible so saverun
# can be dot-executed with minimal side-effects. Saverun will
# exit on certain error conditions (no config file, insufficient
# permissions in flight directory, no log files) and if it is
# being dot-executed, the calling script will exit also.
# I use the not-well-documented feature that "cd -" takes you
# to the previous directory.
#
# If saverun completes successfully, the variables Experiment,
# HomeDir and FlightNode will be defined, as well as data and
# run. The newly created directory is
# //$FlightNode$HomeDir/$data.$run
#
# An alternate configuration file can be specified by defining
# the variable "cfile" before calling saverun. This is used
# by reduce, where it is significant. Here it usually isn't
# except for the fact that the side-effects are used by reduce.
# (i.e. multiple experiment configurations ought to have the
# same Experiment and HomeDir defined, but probably differ
# in EXTRACTIONS, etc.)

#----------------------------------------------------------------
# Locate the configuration file and read it
#  We won't reload the configuration if we aren't called saverun
#  This is true when invoked from reduce.
#----------------------------------------------------------------
zbase=${0##*/}
if [ "$zbase" = "saverun" ]; then
  cfile=Experiment.config
  if [ ! -f "$cfile" ]; then
	echo saverun: Cannot locate $cfile >&2
	exit 1
  fi
  unset Experiment HomeDir FlightNode
  . $cfile
fi
if [ -z "$Experiment" -o -z "$HomeDir" ]; then
  echo saverun: Experiment or HomeDir not defined in $cfile >&2
  exit 1
fi
unset zbase cfile
export Experiment

#----------------------------------------------------------------
# saverun isn't legal when DG is running:
#----------------------------------------------------------------
namewait -n0 -t0 dg 2>/dev/null && {
  echo saverun: dg currently active >&2
  exit 1
}

#----------------------------------------------------------------
# Look the flight node
#----------------------------------------------------------------
typeset FN=$FlightNode fltdir date run
if [ -z "$FN" ]; then
  FlightNode=`namewait -n0 -t0 -G parent 2>/dev/null`
  FN="$FlightNode"
else
  [ ! -d //$FN/ ] && FN=""
fi
if [ -z "$FN" ]; then
  if [ -d "$AltDir" ]; then
	fltdir=$AltDir
  else
	#----------------------------------------------------------------
	# Wait for the flight node
	#----------------------------------------------------------------
	echo "saverun: Waiting for flight computer to boot"
	if [ -z "$FlightNode" ]; then
	  pick_file /dev/null
	  FlightNode=`namewait -n0 -G parent 2>/dev/null`
	  if [ -z "$FlightNode" ]; then
		echo saverun: Unable to locate flight node for experiment $Experiment >&2
		exit 1
	  fi
	else
	  [ "$FlightNode" = "$NODE" ] || namewait -n $FlightNode qnx/net
	fi
  fi
fi
unset FN
[ -z "$fltdir" ] && fltdir=//$FlightNode$HomeDir

if [ ! -d $fltdir ]; then
  echo saverun: Unable to locate flight directory $fltdir >&2
  exit 1
fi

if [ ! -w $fltdir -o ! -x $fltdir ]; then
  echo "saverun: Insufficient permissions for flight directory $fltdir" >&2
  ls -ld $fltdir >&2
  exit 1
fi
cd $fltdir

#----------------------------------------------------------------
# Fix the disk if required
#----------------------------------------------------------------
[ "$FixDisk" = "yes" ] && fixdisk $fltdir

#----------------------------------------------------------------
# Check to see if there are any log directories
#----------------------------------------------------------------
logdirs=''
[ -n "$LogDirs" ] || LogDirs="log*"
for i in $LogDirs; do
  [ -d "$i" ] && logdirs="$logdirs $i"
done
if [ -z "$logdirs" ]; then
  echo saverun: No log directories found.
  exit 1
fi
date=`date +%y%m%d`
run=1
while [ -d $date.$run ]; do
 let run=$run+1
done
echo saverun: Making directory $date.$run
mkdir $date.$run
mv -v $logdirs $date.$run
for i in *.log; do
  [ -f $i ] && mv -v $i $date.$run
done
unset tocopy
for i in *.pcm *.tmc *.prt *.tma *.sol tm.dac VERSION; do
  [ -f $i ] && tocopy="$tocopy $i"
done
if [ -n "$SaveFiles" ]; then
  for i in $SaveFiles; do
	if [ -f $i ]; then
	  tocopy="$tocopy $i"
	else
	  echo saverun: Unable to locate SaveFiles $i >&2
	fi
  done
fi
if [ -n "$tocopy" ]; then
  cp -v $tocopy $date.$run
fi
unset tocopy i
cd -
