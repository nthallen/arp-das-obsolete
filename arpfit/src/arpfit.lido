%--------------------------------------------
% arpfit.lido - Grammar Semantics for arpfit
%--------------------------------------------

%--------------------------------------------
% Name analysis
%--------------------------------------------

ATTR Sym: int SYNT;
ATTR Key: DefTableKey;

SYMBOL Identifier COMPUTE SYNT.Sym = TERM; END;

CLASS SYMBOL LValue END;
SYMBOL DeclLValue INHERITS LValue END;
SYMBOL DefLValue INHERITS LValue END;
SYMBOL UseLValue INHERITS LValue END;

CLASS SYMBOL RefLValue END;
SYMBOL DefLValue INHERITS RefLValue END;
SYMBOL UseLValue INHERITS RefLValue END;

CLASS SYMBOL LValue COMPUTE
  SYNT.Sym = CONSTITUENT Identifier.Sym;
  END;

%--------------------------------------------
% Debugging output: ShowParse
%--------------------------------------------
% ATTR TopLevel, ChildLevel: int;
% SYMBOL Program COMPUTE
%   SYNT.TopLevel = 1;
% END;

% SYMBOL Expression COMPUTE
%   SYNT.ChildLevel = 0;
%   INH.TopLevel = INCLUDING( Expression.ChildLevel, Program.TopLevel );
%   IF( AND(THIS.TopLevel,ShowParse),
%     message( NOTE, PTRSELECT(THIS.Expr,parsed()), 0, COORDREF ));
% END;

SYMBOL Statement COMPUTE
  IF( ShowParse,
    message( NOTE, PTRSELECT(THIS.Statement,parsed()), 0, COORDREF ));
  END;

%--------------------------------------------
% Building Expression Trees
%--------------------------------------------

ATTR Expr: af_expression_p;

RULE: Expression ::= Sum COMPUTE Expression.Expr = Sum.Expr; END;
RULE: Expression ::= '+' Sum COMPUTE Expression.Expr = Sum.Expr; END;
RULE: Expression ::= '-' Sum COMPUTE
  Expression.Expr = NEW(af_expr_func(COORDREF, "-unary", Sum.Expr ));
  END;

RULE: Sum ::= Term COMPUTE Sum.Expr = Term.Expr; END;
RULE: Sum ::= Sum '+' Term COMPUTE
  Sum[1].Expr =
    NEW(af_expr_func( COORDREF, "+", Sum[2].Expr, Term.Expr ) );
  END;
RULE: Sum ::= Sum '-' Term COMPUTE
  Sum[1].Expr =
    NEW(af_expr_func( COORDREF, "-", Sum[2].Expr, Term.Expr ) );
  END;

RULE: Term ::= Factor COMPUTE Term.Expr = Factor.Expr; END;
RULE: Term ::= Term '*' Factor COMPUTE
  Term[1].Expr =
    NEW(af_expr_func( COORDREF, "*", Term[2].Expr, Factor.Expr ) );
  END;
RULE: Term ::= Term '/' Factor COMPUTE
  Term[1].Expr =
    NEW(af_expr_func( COORDREF, "/", Term[2].Expr, Factor.Expr ) );
  END;

RULE: Factor ::= Primary '^' Primary COMPUTE
  Factor.Expr =
    NEW(af_expr_func( COORDREF, "^", Primary[1].Expr, Primary[2].Expr ));
  END;
RULE: Factor ::= Primary COMPUTE Factor.Expr = Primary.Expr; END;

SYMBOL Primary COMPUTE
  SYNT.Expr = CONSTITUENT (
    Expression.Expr, UseLValue.Expr, Constant.Expr,
    VectorConstant.Expr, FunctionInvocation.Expr )
  SHIELD ( Expression, UseLValue, VectorConstant,
    FunctionInvocation );
  END;

RULE: Constant ::= Integer COMPUTE
  Constant.Expr = NEW(af_expr_const(COORDREF, Integer));
  END;
RULE: Constant ::= Float COMPUTE
  Constant.Expr = NEW(af_expr_const(COORDREF, atof(StringTable(Float))));
  END;

ATTR Variable: af_variable_p;
ATTR ExprLV: af_expr_lvalue_p;
ATTR VarType: var_type_t;
ATTR Types_Set: VOID; /* Indicates that variable types have propogated to
                        Identifiers */
ATTR Vars_Set: VOID;  /* Indicates that the Variable properties
                        of Identifiers have been defined. */
ATTR Funcs_Set: VOID; /* Indicates that the Function properties
                        of Identifiers have been defined. */
SYMBOL Program COMPUTE
  SYNT.Vars_Set = CONSTITUENTS ( RefLValue.Vars_Set, DeclLValue.Vars_Set );
  END;

ATTR Has_Index, Index: int;
SYMBOL Index COMPUTE
  SYNT.Has_Index = 0;
  SYNT.Index = 0;
  END;
RULE: Index ::= '[' Integer ']' COMPUTE
  Index.Has_Index = 1;
  Index.Index = Integer;
  END;
CLASS SYMBOL LValue COMPUTE
  SYNT.Has_Index = CONSTITUENT Index.Has_Index;
  SYNT.Index = CONSTITUENT Index.Index;
  END;

%-------------------------------------------------------------------
% Handle a couple cases that are no longer syntactically illegal.
% Make them semantically illegal.
%-------------------------------------------------------------------
ATTR DefCond: int; % Defined in scope.lido
RULE: Def_Assignment ::= DefLValue '=' Expression COMPUTE
  IF(DefLValue.Has_Index,
    message (ERROR,
      CatStrInd ("Illegal Assignment to array in a declaration: ", DefLValue.Sym),
      0, COORDREF));
  END;
SYMBOL RefLValue COMPUTE
  IF(AND(THIS.DefCond,THIS.Has_Index),
    message (ERROR,
      CatStrInd ("Array must be declared before use: ", THIS.Sym),
      0, COORDREF));
  END;

%------------------------------------------------------------------
% Create Variables and af_expr_lvalues
%------------------------------------------------------------------
SYMBOL LValue COMPUTE
  INH.Function =
    INCLUDING ( FunctionDef.Function, Program.Function,
		While_Loop.Function );
  END;
SYMBOL RefLValue COMPUTE
  SYNT.Vars_Set =
    IF(THIS.DefCond,
      ResetVariable( THIS.Key,
	NEW(af_variable(COORDREF, THIS.VarType, THIS.Sym,
	  THIS.Function, THIS.Has_Index, THIS.Index ))));
  END;
SYMBOL DeclLValue COMPUTE
  SYNT.Vars_Set =
    ResetVariable( THIS.Key,
      NEW(af_variable(COORDREF, THIS.VarType, THIS.Sym,
	THIS.Function, THIS.Has_Index, THIS.Index )));
  END;

SYMBOL UseLValue COMPUTE
  SYNT.ExprLV = IF(THIS.Has_Index,
    NEW(af_expr_lvalue(COORDREF, THIS.Variable, THIS.Index)),
    NEW(af_expr_lvalue(COORDREF, THIS.Variable)));
  SYNT.Expr = THIS.ExprLV;
  END;

CLASS SYMBOL LValue COMPUTE
  SYNT.Variable = GetVariable(THIS.Key, 0)
    <- INCLUDING Program.Vars_Set;
  END;

%--------------------------------------------
% Logical Expressions:
%--------------------------------------------
ATTR func: C_STR;

RULE: Logical_Expression ::= Logical_Expression '&&' Logical_Primary COMPUTE
  Logical_Expression[1].Expr =
    NEW(af_expr_func(COORDREF, "&&",
	Logical_Expression[2].Expr, Logical_Primary.Expr ));
  END;
RULE: Logical_Expression ::= Logical_Expression '||' Logical_Primary COMPUTE
  Logical_Expression[1].Expr =
    NEW(af_expr_func(COORDREF, "||",
	Logical_Expression[2].Expr, Logical_Primary.Expr ));
  END;
RULE: Logical_Expression ::= Logical_Primary COMPUTE
  Logical_Expression.Expr = Logical_Primary.Expr;
  END;
RULE: Logical_Expression ::= Expression Rel_Op Expression COMPUTE
  Logical_Expression.Expr =
    NEW(af_expr_func(COORDREF, Rel_Op.func,
	Expression[1].Expr, Expression[2].Expr ));
  END;

RULE: Logical_Primary ::= '(' Logical_Expression ')' COMPUTE
  Logical_Primary.Expr = Logical_Expression.Expr;
  END;
RULE: Logical_Primary ::= '!' Logical_Primary COMPUTE
  Logical_Primary[1].Expr =
    NEW(af_expr_func(COORDREF, "!", Logical_Primary[2].Expr ));
  END;

RULE: Rel_Op ::= '>' COMPUTE Rel_Op.func = ">"; END;
RULE: Rel_Op ::= '<' COMPUTE Rel_Op.func = "<"; END;
RULE: Rel_Op ::= '>=' COMPUTE Rel_Op.func = ">="; END;
RULE: Rel_Op ::= '<=' COMPUTE Rel_Op.func = "<="; END;
RULE: Rel_Op ::= '==' COMPUTE Rel_Op.func = "=="; END;
RULE: Rel_Op ::= '!=' COMPUTE Rel_Op.func = "!="; END;

%-------------------------------------------------------------
% Argument type propogation
%-------------------------------------------------------------
CHAIN VarTypeDef: var_type_t;
SYMBOL Program COMPUTE
  CHAINSTART HEAD.VarTypeDef = Var_None;
  SYNT.Types_Set = TAIL.VarTypeDef;
  END;
RULE: ArrayAssignment ::= '[' DefLValue_List ']' '='
           FunctionInvocation COMPUTE
  DefLValue_List.VarTypeDef = Var_Input;
  FunctionInvocation.VarTypeDef = ArrayAssignment.VarTypeDef;
  ArrayAssignment.VarTypeDef = Var_None;
  END;
SYMBOL Func_Arg_Type COMPUTE
  THIS.VarTypeDef = THIS.VarType <- THIS.VarTypeDef;
  END;
SYMBOL Arg_Type COMPUTE
  THIS.VarTypeDef = THIS.VarType <- THIS.VarTypeDef;
  END;
RULE: Func_Arg_Type ::= Arg_Type COMPUTE
  Func_Arg_Type.VarType = Arg_Type.VarType;
  END;
RULE: Func_Arg_Type ::= 'INDEPENDENT' COMPUTE
  Func_Arg_Type.VarType = Var_Independent;
  END;
RULE: Arg_Type ::= 'PARAM'  COMPUTE
  Arg_Type.VarType = Var_Param;
  END;
RULE: Arg_Type ::= 'INPUT'  COMPUTE
  Arg_Type.VarType = Var_Input;
  END;
RULE: Arg_Type ::= 'CONSTANT' COMPUTE
  Arg_Type.VarType = Var_Const;
  END;
CLASS SYMBOL LValue COMPUTE
  SYNT.VarType = THIS.VarTypeDef;
  THIS.VarTypeDef = THIS.VarType;
  END;

%-------------------------------------------------------------
% Vectors
%-------------------------------------------------------------
ATTR Vector: af_expr_vector_p;
ATTR Vector_Elt_Added: VOID;

RULE: VectorConstant ::= '[' VectorList ']' COMPUTE
  VectorConstant.Vector = NEW(af_expr_vector(COORDREF));
  VectorConstant.Expr = VectorConstant.Vector
    <- CONSTITUENTS VectorElement.Vector_Elt_Added;
  END;

% VectorList ::= VectorElement // ','
SYMBOL VectorElement COMPUTE
  INH.Vector = INCLUDING VectorConstant.Vector;
  SYNT.Vector_Elt_Added = PTRSELECT(THIS.Vector, add_element(THIS.Expr));
  END;
RULE: VectorElement ::= Expression COMPUTE
  VectorElement.Expr = Expression.Expr;
  END;
RULE: VectorElement ::= Expression ':' Expression COMPUTE
  VectorElement.Expr = NEW(af_expr_vector_triple(COORDREF,
      Expression[1].Expr, 0, Expression[2].Expr));
  END;
RULE: VectorElement ::= Expression ':' Expression ':' Expression COMPUTE
  VectorElement.Expr = NEW(af_expr_vector_triple(COORDREF,
     Expression[1].Expr, Expression[2].Expr, Expression[3].Expr));
  END;

%-------------------------------------------------------------
% Function Definition
%   Need to collect the name, decls and expr to create the
%   af_function_p and associate it with the Key
%   The global context has no decls either.
% Set_Funcs chain makes sure function definitions are associated
%   with the symbol name.
%-------------------------------------------------------------
ATTR FuncInv, Expr_Func: af_expr_func_p;
ATTR Function: af_function_p;
CHAIN Set_Funcs: VOID;

SYMBOL Program COMPUTE
  SYNT.Function = NEW(af_function(COORDREF, "GLOBAL"));
  CHAINSTART HEAD.Set_Funcs = THIS.Function;
  SYNT.Funcs_Set = TAIL.Set_Funcs;
  END;
RULE: FunctionDef ::= 'Function' Identifier FunctionRange COMPUTE
  FunctionDef.Sym = Identifier.Sym;
  FunctionDef.Function =
    NEW(af_function(COORDREF, StringTable(Identifier.Sym)));
  ResetFunction( FunctionDef.Key, FunctionDef.Function )
    <- FunctionDef.Set_Funcs;
  FunctionDef.Set_Funcs =
    PTRSELECT(FunctionDef.Function,
      set_IO(FunctionRange.Decl_List_f, FunctionRange.Expr));
  END;
RULE: FunctionRange ::= '(' Prototype ')' Function_Body COMPUTE
  FunctionRange.Decl_List_f = Prototype.Decl_List_f;
  FunctionRange.Expr = Function_Body.Expr;
  END;
RULE: Function_Body ::=  '{' Function_Statements Return_Statement '}' COMPUTE
  Function_Body.Expr = Return_Statement.Expr;
  END;
RULE: Function_Body ::= '=' Expression ';' COMPUTE
  Function_Body.Expr = Expression.Expr;
  END;
RULE: Function_Body ::= ';' COMPUTE
  Function_Body.Expr = 0;
  END;
RULE: Return_Statement ::= 'Return' Expression ';' COMPUTE
  Return_Statement.Expr = Expression.Expr;
  END;

%-------------------------------------------------------------
% Function Invocation
%-------------------------------------------------------------
RULE: FunctionInvocation ::= Identifier '(' Func_Arg_List ')' COMPUTE
  FunctionInvocation.Sym = Identifier.Sym;
  IF(FunctionInvocation.DefCond,
    message (ERROR,
      CatStrInd ("Undefined Function: ", Identifier.Sym),
      0, COORDREF));
  FunctionInvocation.Function = GetFunction( FunctionInvocation.Key, 0 )
    <- FunctionInvocation.Set_Funcs;
  FunctionInvocation.FuncInv =
    IF(FunctionInvocation.Function,
      NEW(af_expr_func(COORDREF, FunctionInvocation.Function)),
      NEW(af_expr_func(COORDREF, "[Undefined]")));
  Func_Arg_List.Set_Funcs = FunctionInvocation.Function;
  FunctionInvocation.Expr_Func = FunctionInvocation.FuncInv
    <- Func_Arg_List.Set_Funcs;
  FunctionInvocation.Expr = FunctionInvocation.Expr_Func;
  FunctionInvocation.Set_Funcs = FunctionInvocation.Expr;
  END;

% Func_Arg_List : Func_Arg // ',' .
SYMBOL Func_Arg COMPUTE
  INH.FuncInv = INCLUDING FunctionInvocation.FuncInv;
  SYNT.Set_Funcs = PTRSELECT(THIS.FuncInv, new_operand(THIS.Expr))
    <- THIS.Set_Funcs;
  END;
RULE: Func_Arg ::= String COMPUTE
  Func_Arg.Expr = NEW(af_expr_string(COORDREF, StringTable(String)));
  END;
RULE: Func_Arg ::= Expression COMPUTE
  Func_Arg.Expr = Expression.Expr;
  END;

%-------------------------------------------------------------
% Assignments and Prototypes
% Declaration Lists
% An af_decl_list_p is a list of af_variables. We need these
% lists for function prototypes and array assignments
%
% Decl_List is used to assemble the list.
% Decl_List_f is the completed list.
%-------------------------------------------------------------
ATTR Decl_List, Decl_List_f: af_decl_list_p;
CHAIN Set_Decls: VOID;

CLASS SYMBOL VarList_Head COMPUTE
  SYNT.Decl_List = NEW(af_decl_list());
  CHAINSTART HEAD.Set_Decls = 0;
  SYNT.Decl_List_f = THIS.Decl_List <- TAIL.Set_Decls;
  END;
CLASS SYMBOL VarList_Elt COMPUTE
  INH.Decl_List = INCLUDING VarList_Head.Decl_List;
  SYNT.Variable = CONSTITUENT LValue.Variable;
  SYNT.Set_Decls = PTRSELECT( THIS.Decl_List, add_decl(THIS.Variable) )
    <- THIS.Set_Decls;
  END;

SYMBOL DefLValue_List INHERITS VarList_Head END;
SYMBOL Prototype INHERITS VarList_Head END;
SYMBOL DefLValue_List_Elt INHERITS VarList_Elt END;
SYMBOL DeclLValue_List_Elt INHERITS VarList_Elt END;

%-------------------------------------------------------------
% Statements
% Set_Stats chain adds each statement to either the statement
% or modifier list.
%-------------------------------------------------------------
CHAIN Set_Stats: VOID;
ATTR Stats_Set: VOID;
ATTR Statement: af_statement_p;

SYMBOL Program COMPUTE
  CHAINSTART HEAD.Set_Stats = 0;
  SYNT.Stats_Set = TAIL.Set_Stats;
  END;
CLASS SYMBOL Statement COMPUTE
  INH.Function =
    INCLUDING ( FunctionDef.Function, Program.Function,
		While_Loop.Function );
  SYNT.Set_Stats =
    PTRSELECT(THIS.Function,
      statement(THIS.Statement))
    <- THIS.Set_Stats;
  END;
CLASS SYMBOL Modifier COMPUTE
  INH.Function =
    INCLUDING ( FunctionDef.Function, Program.Function,
		While_Loop.Function );
  SYNT.Set_Stats =
    PTRSELECT(THIS.Function,
      modifier(THIS.Statement))
    <- THIS.Set_Stats;
  END;
SYMBOL Assignment INHERITS Statement END;
RULE: Assignment ::= DefLValue '=' Expression COMPUTE
  Assignment.Statement =
        NEW(af_stmnt_assign(COORDREF, DefLValue.Variable,
	      DefLValue.Has_Index, DefLValue.Index, Expression.Expr));
  END;
SYMBOL Def_Assignment INHERITS Statement END;
RULE: Def_Assignment ::= DefLValue '=' Expression COMPUTE
  Def_Assignment.Statement =
        NEW(af_stmnt_assign(COORDREF, DefLValue.Variable,
	      DefLValue.Has_Index, DefLValue.Index, Expression.Expr));
  END;
SYMBOL ArrayAssignment INHERITS Statement END;
RULE: ArrayAssignment ::= '[' DefLValue_List ']' '=' FunctionInvocation COMPUTE
  ArrayAssignment.Statement =
    NEW(af_stmnt_arr_assign( COORDREF, DefLValue_List.Decl_List_f,
      FunctionInvocation.Expr_Func ));
  END;
SYMBOL Fit INHERITS Statement END;
RULE: Fit ::= 'Fit' UseLValue 'To' Expression ';' COMPUTE
  Fit.Statement =
    NEW(af_stmnt_fit( COORDREF, UseLValue.ExprLV, Expression.Expr ));
  END;

%---------------------------------------------------------------------
% Set_Fixes chain's purpose is to fully assemble each Fix_Float.Statement
% before it is added to the list of function modifiers.
%---------------------------------------------------------------------
ATTR FixFlt: af_stmnt_fixflt_p;
CHAIN Set_Fixes: VOID;

SYMBOL Param_Modifier INHERITS Modifier END;
RULE: Fix_Float ::= 'Fix' Fix_List Fix_Condition ';' COMPUTE
  Fix_Float.FixFlt =
    NEW(af_stmnt_fix( COORDREF, Fix_Condition.Expr ));
  END;
RULE: Fix_Float ::= 'Float' UseLValue_List Fix_Condition ';' COMPUTE
  Fix_Float.FixFlt =
    NEW(af_stmnt_float( COORDREF, Fix_Condition.Expr ));
  END;
SYMBOL Fix_Float COMPUTE
  CHAINSTART HEAD.Set_Fixes = 0;
  SYNT.Statement = THIS.FixFlt <- TAIL.Set_Fixes;
  END;
RULE: Fix_List_Elt ::= UseLValue COMPUTE
  Fix_List_Elt.FixFlt = INCLUDING Fix_Float.FixFlt;
  Fix_List_Elt.Set_Fixes =
    PTRSELECT( Fix_List_Elt.FixFlt,
      addfixflt( COORDREF, UseLValue.ExprLV ))
    <- Fix_List_Elt.Set_Fixes;
  END;
RULE: Fix_List_Elt ::= Param_Assign COMPUTE
  Fix_List_Elt.FixFlt = INCLUDING Fix_Float.FixFlt;
  Fix_List_Elt.Set_Fixes =
    PTRSELECT( Fix_List_Elt.FixFlt,
      addfixflt( COORDREF, Param_Assign.ExprLV, Param_Assign.Expr ))
    <- Fix_List_Elt.Set_Fixes;
  END;
RULE: UseLValue_List_Elt ::= UseLValue COMPUTE
  UseLValue_List_Elt.FixFlt = INCLUDING Fix_Float.FixFlt;
  UseLValue_List_Elt.Set_Fixes =
    PTRSELECT( UseLValue_List_Elt.FixFlt,
      addfixflt( COORDREF, UseLValue.ExprLV ))
    <- UseLValue_List_Elt.Set_Fixes;
  END;

RULE: Fix_Condition ::= COMPUTE Fix_Condition.Expr = 0; END;
RULE: Fix_Condition ::= 'if' Logical_Expression COMPUTE
  Fix_Condition.Expr = Logical_Expression.Expr;
  END;

RULE: Param_Assign ::= UseLValue '=' Expression COMPUTE
  Param_Assign.ExprLV = UseLValue.ExprLV;
  Param_Assign.Expr = Expression.Expr;
  END;

RULE: Param_Modifier ::= Fix_Float COMPUTE
  Param_Modifier.Statement = Fix_Float.Statement;
  END;

ATTR constrain_op: constraint_type_t;

RULE: Constrain_Op ::= '<=' COMPUTE
  Constrain_Op.constrain_op = Constrain_LE;
  END;
RULE: Constrain_Op ::= '>=' COMPUTE
  Constrain_Op.constrain_op = Constrain_GE;
  END;

RULE: Param_Modifier ::= 'Constrain' UseLValue Constrain_Op Expression ';'
COMPUTE
  Param_Modifier.Statement =
    NEW(af_stmnt_constraint( COORDREF, UseLValue.ExprLV,
        Constrain_Op.constrain_op, Expression.Expr ));
  END;
RULE: Param_Modifier ::= 'Initialize' Param_Assign ';' COMPUTE
  Param_Modifier.Statement =
    NEW(af_stmnt_init( COORDREF, Param_Assign.ExprLV, Param_Assign.Expr ));
  END;

SYMBOL ControlStructure INHERITS Statement END;
SYMBOL While_Loop COMPUTE
  SYNT.Function = NEW(af_function(COORDREF, "WHILE_LOOP"));
  SYNT.Statement =
    NEW(af_stmnt_loop(COORDREF,THIS.Function));
  END;
SYMBOL ControlStructure COMPUTE
  SYNT.Statement = CONSTITUENT While_Loop.Statement;
  END;
%	Function_Statement :
%	  'File' String ';' /

%-------------------------------------------------------------
% Instantiation and Execution
%-------------------------------------------------------------
ATTR Instance: VOID;
SYMBOL Program COMPUTE
  SYNT.Instance = PTRSELECT( THIS.Function, Instantiate() ) <-
    ( THIS.Funcs_Set, THIS.Stats_Set );
  PTRSELECT( THIS.Function, Execute() ) <- THIS.Instance;
  END;
