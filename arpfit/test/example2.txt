Function exp( INPUT s ) { Return 2.718281827^s; }
Function read_cpci( INPUT i, low, high ) { Return 5; }
Function sin( INPUT s ) { Return 2.718281827^s; }
Function read_text( INPUT s ) { Return 2.718281827^s; }
Function skew( INPUT s ) { Return 2.718281827^s; }

pi = 3.14159265358;
CONSTANT Low = 200;
CONSTANT High = 1830;
CONSTANT ETLN_FSR = 0.0198;
// INPUT T, P, TR[7]; // Explicit definition of a vector
// INPUT i;

// Implicit definition of a vector of length High-Low+1
CONSTANT x = [ Low:High ];
// INPUT etln[High-Low+1];
// INPUT icos[High-Low+1];

PARAM ETR[7], EP[4], EF;

Function fringenumber( INDEPENDENT x, PARAM TR[7] ) {
  Return TR[0]+TR[1]*x+TR[2]*x*x +
     TR[3]*exp(-x/TR[4]) + TR[5]*exp(-x/TR[6]);
}
Function wavenumber( INDEPENDENT x, PARAM TR[7] ) =
  fringenumber( x, TR) * ETLN_FSR;
Function etlnpower( INDEPENDENT x, PARAM EP[4] ) =
  EP[0] + EP[1]*x + EP[2]*x^2 + EP[3]*x^3;

Function airey( INDEPENDENT x, PARAM TR[7], EP[4], EF ) {
  Return etlnpower(x,EP)/(1+EF*sin(fringenumber(x,TR)*pi)^2);
}

While ( [ i, P, T ] = read_text( "PT.txt" ) ) {
  [etln,icos] = read_cpci( i, Low, High );
  Fit etln To airey( x, ETR, EP, EF );
  TR = ETR; // Now consider TR to be inputs to the icos fit.
  // This syntax may not work: According to the functional
  // scheme, TR = ETR means that TR is now a PARAM identical
  // to ETR. I'd need a casting mechanism to have TR become
  // an INPUT initialized to ETR.
  // Perhaps: INPUT TR = ETR; would work.
  //
  // Or perhaps in airey() I 'float ETR' and in skew() I 'fix ETR'
  Fit icos To skew(x);
}
