Overview

  Life cycle of a fit:
	Define the function(s)
	Initialize parameters
	Loop {
	  Read Inputs, INDEPENDENT and DEPENDENT values
	  Initialize fit
	  Perform fit
	  Record results
	}

Define the functions: {

  Dependence on the independent variable could be either
  implicit or explicit.
  
  Definition of objects. Objects are distinct if they have
  different inputs. Might make sense to allow for naming
  objects.
  
  Assignment:
  
    L1 = voigt( nu, 3423.2, ..., T, P );
  
  Function Definition:
  
    Function voigt( INDEPENDENT nu, PARAM dnu, N, Ged, Gl, INPUT T, P, CONST nu0...) {
      PARAM
    }
    
    Function <name> [ ( <proto_args> ) ] {
      <definitions>
	  <func_statement>
      return <expression>;
    }
    
	definition : <type> <varlist>; / File <string>;
    func_statement : <param_modifier> / <assignment> / <func_def>;

    PARAMs can be declared in the prototype or
    defined in the body. If declared in the prototype, they must be
    defined elsewhere.
    
    Variables of all types can be referenced from the enclosing context.
    Functions can be nested.
    
    CONST: defined once and never change
    INPUT: may be modified between fits. Must be defined at global context.
    PARAM: may be modified on each iteration of the fit
    INDEPENDENT: modified on each function evaluation

    Common Subexpressions are identified at compile time (expressions that
    have the same inputs in the same order). At the end of the compile,
    an evaluation test is run to determine when each branch needs to
    be evaluated. This information is stored in the reference:
    
      CONST - Once at compile time
      INPUT - Once before each fit
      PARAM - Once before each iteration of the fit
      INDEPENDENT - Every Time
      NEVER - not the first visit for a common subexpression

    Functions are not procedural (or we can't differentiate).
	
	File <string>;
	
	Only allowed in function definitions without prototype args i.e.
	those guaranteed to have only one invocation (else we'd have
	collisions) file is used for both input and output. input when
	we are restarting to initialize parameters. output when we
	are fitting. File will contain the INDEX, all PARAMs and their
	fit state.
}
Initialize the Parameters {
  Parameter initialization can take place in a number of ways:
  INITIALIZE statements within function definitions
  Explicit assignment in the Global context
  Via File statement and Restart
}
Read Inputs {
}
Initialize the fit {
  The main aspect of the fit that we currently need to initialize is
  the selection of the input range (i.e. what points in the raw input
  we will use in the fit.) This is necessary in icosfit because lines
  can drift out of our fitting range, and it is best to move our
  borders well away from lines that we are not fitting. In the current
  implementation, this is handled by a separate method of the function
  objects and is fairly complicated and peculiar to line-fitting.
  Fitting a line which is outside the input range will lead to
  runtime errors due to singular covariance matrices since the chi^2
  function will be essentially independent of the parameters of the
  distant line. These lines need to be turned off at some point, but
  if they are turned off completely (N set to zero and fixed) then
  it is important to make sure that we are well away from the region.
  It might be reasonable to float N out to 2 half-widths, but we
  probably want to be at least n half-widths away if N is fixed at
  zero. (can this be quantified?)
  
  The current approach is done in two passes. First we throw out any
  lines which are mostly out of range. As each line is discarded the
  range must get narrower, and this could impact other lines, so this
  is an iterative process.
  
  Once the narrowing process stabilizes, a widening pass ensues.
  The point of this is to start from an empty range and expand to
  include all the lines which are not turned off (but not to exceed
  the limits of the narrowing pass). The point here is to only fit
  near lines we care about to increase the fitting speed.

  Another type of initialization that might be useful would be
  specification of the sigma vector for weighting the chi^2 function.
  
  Actually, these might be combined to provide a more objective
  approach. Each function (that cares) could during initialization
  define the range over which it's parameters are significant.
  If the overlap of it's parameters with the input range is too
  small, it's parameters would be "turned off" and it's range of
  significance would be eliminated from the input range. In the
  end, only those input points with some significance would be
  included in the fit.
  
  A simple answer is not to do the two-pass approach. Assume that
  if the parameters are insignificant to the fit, then they are
  insignificant, so we can turn them off, but we don't have to
  cut out a larger range. In this case, we can simply say
  fix N=0, Ged, Gl, dnu IF <outofrange>; but we need to know
  what the range is.
  
  Perhaps we define the range in terms of two constants:
  CONST low = 200;
  CONST high = 1830;
  
  Now we read the icos data and the tuning rate data and use
  nu[low] in a FIX statement. When are FIX statements evaluated?
  Depends on their type. 
}


Global Context:

  Need to define Function, CONST, INPUT, PARAM, INDEPENDENT, DEPENDENT
  
  PARAM TRP[3], TRK1, TRTC1, TRK2, TRTC2, PCP[4], ETF;
  INITIALIZE [ TRP, TRK1, TRTC1, TRK2, TRTC2, PCP, ETF ] = read_tune();
  
  INPUT CPCI, T, P;
  WHILE ( [ CPCI, T, P ] = read_line("PT.txt") ) {
    [i,e] = read_bin(CPCI,range);
    fit( etalon() );
	output("TR.dat", CPCI, TRP, TRK1, TRTC1, TRK2, TRTC2, PCP, ETF );
    
	fix TRP, TRK1, TRTC1, TRK2, TRTC2, PCP, ETF;
	fit( skew() );
	output("ICOSsum.dat", CPCI, ... );
  }

I/O Definition

  Support for ASCII files with rows of data. Some can be used for
  inputs, others for outputs (fitted data), but the output files
  may also be used as inputs when restarting a fit.

Array Assignment

  [ <var list> ] = <function invocation>;
  
  This is tricky. It only applies to function invocations, and
  specifically to internal functions defined to handle array
  assignment. Some functions will treat all the variables in
  the var list as one long vector and assign their outputs to
  each in turn. Others will treat each variable as a separate
  vector, and may redefine its length.

Vector Expressions

  [ value value ]
  Matlab has some interesting parsing:
  
  [ -3 -1 5 ] is a 3-element vector
  [ -3-1 5 ] and [ -3 - 1 5 ] are 2-element vectors
  
  The mind boggles. Spaces separate vector elements except in the
  last case where there is an orphaned operator. I think I'll skip
  this little oddity. In fact, I think I'll use commas to delimit
  vectors.
  
Variable Types

  I want to support vectors and scalars as intuitively as possible.
  Independent inputs and dependent outputs will be represented as
  vectors of equal length, but the actual fit will be processed
  on scalars. Hence when a function argument is declared INDEPENDENT,
  it should be treated as a scalar. What about other variables? Can
  vectors be passed and used? We clearly need access to other vectors
  that are of the same length as x and y. Baseline svds, for example,
  and tuning rate. These could be handled inside special functions
  (as baseline svds are now). Short vectors of parameters should
  be supported as is, passed as vectors and dereferenced in the usual
  way. I could restrict vector dereferencing to constants for now.
  
  PARAM
  CONSTANT
  INPUT
	[INDEX]
	INDEPENDENT
	[DEPENDENT]

  PARAM - Fit parameters. May be a vector, but each element is treated
  independently. PARAMs may be fixed, in which case they behave like
  INPUTs.
  
  CONSTANT - A constant value that is initialized once at startup. May
  be a vector.
  
  INPUT - A value that may be updated once per fit. May be a vector
  
  INDEX - A scalar INPUT that serves as an index into multiple fits.
  Each assignment should be a unique value which can be used to
  retrieve both input data and output summaries. [There may be no
  code in fit that uses the index concept, so it may make sense to
  simply treat INDEX as a synonym for INPUT]
  
  INDEPENDENT - An INPUT vector which serves as the independent values
  in the fit. Function evaluation is performed on scalar elements
  of this vector, not on the vector as a whole. Multiple INDEPENDENT
  inputs can be specified to a function, in which case, all of the
  inputs must be of the same length, and the function is evaluated
  with corresponding elements of each INDEPENDENT vector. INDEPENDENT
  is specified in a function prototype, not in a global definition.
  
  DEPENDENT - An INPUT vector which specifies the dependent values in
  the fit. Function values for corresponding elements of the
  INDEPENDENT vector(s) are compared to the DEPENDENT vector.
  DEPENDENT is never actually declared explicitly. It is an attribute
  of an INPUT vector that is determined implicitly by reference in
  the 'Fit' statement: Fit etln to <expression>; All INDEPENDENT
  variables referenced in <expression> must have the same dimension
  as etln.

June 15, 2004

  Trying to figure out what Function objects and Expression objects
  need to do.
  
  Function {
    Attributes:
	  list of formal parameters with types
	  list of implicit parameters with types
	  list of internal definitions with types
	  list of internal parameter definitions
	  list of implicit params
	  has_implicit_inputs
	  Expression
  }
  
  Rework July 12, 2004 {
	There are (at least) 3 types of functions this program will
	recognize: Input functions, Internal functions and user-defined
	functions.
	
	Input functions (read_text(), etc.) {
	  These are internal functions, but unlike the other two function
	  types, these can have multiple outputs and can take string
	  arguments (for filenames, for example).
	  
	  Like the other functions, input functions will have a prototype
	  against which arguments can be tested at compile time.
	  
	  Will have pre-defined symbol names.
	}
	Internal Functions {
	  prototype
	  optimizations
	  evaluation
	  
	  Some of these will be associated with global keywords
	  (predefined symbols): exp, sin, cos, etc.
	  Others will have hidden names because they are associated with
	  operators, not function names: '*', '+', etc.
	}
	User Defined Functions {
	  prototype
	  evaluation
	}
	
	Evaluation of functions involves {
	  Evaluating the input instances
	  Invoking the function, storing the results in the instance
	}
  }
  
  Expression {
	Attributes:
	  Function
	  Type
	  List of formal input expressions
	  List of all inputs
	  List of arguments
	  List of all Params
	Methods:
	  Instantiate
	  Resolve_Type;
	  Evaluate( [Eval_Const|Eval_Input|Eval_Full] );
  }
  
  Expr_Instance {
	Attributes:
	  Expression
	  Type
	  actual_inputs
	  actual_params
	  list of derivative calculations
	  list of actual arguments
  }

  Implicit arguments to functions are a notational convenience, but
  they are anathema to the optimizer, so any implicit arguments must
  be internally added to the function signature. When a reference
  is made, it must be added to the signature of every enclosing
  node back to its definition.
  
  Params defined within a function behave as though they are defined
  at the global level, and hence need to be added to the function
  signature back to the global level. (This is not true for inputs
  and constants defined internally, since they are defined by
  reference to an expression.)
  
  Params defined within a function definition are common to identical
  invocations, but not to different invocations.
	
	Function f(CONSTANT i) {
	  Param u;
	  Return i*u;
	}
	
	f(3) => f(3,f(3)::u)
	f(4) => f(4,f(4)::u)

  Internal inputs and constants are different in that the only way
  they can be initialized is by reference to other elements which
  ultimately are either constants (and hence not function inputs)
  or external inputs which need to be referenced.

  The same is true for inputs and constants (no, that's not true

  How do formal parameters get mapped to values?
  
  Function f(Param u) {
    Function g() {
	  Return 5*u;
	}
    Return g();
  }
  
  z = f( 3*x ) + f( 5*z );
  
  An Expression may refer to a formal parameter (perhaps from an
  enclosing function definition). 

  f::g has an implicit param f::u
  Evaluation of z {
    Expression( f(3*x) + f(5*z) )
	=> Expression( ADD, Expression( f, Expression( MUL, 3, x ) ),
	                    Expression( f, Expression( MUL, 5, z ) ))
	f::u is mapped to Expression( MUL, 3, x )
  }
  
  When a function is evaluated, each node is assessed and duplicated
  if anything about it depends on its input arguments. For each
  function, I could maintain a list of invocations, and I could
  check this invocation against all the others to see if the inputs
  are the same. If they are, then I can use the same expression node
  and evaluate it only once. However, I need to include all the
  implicit inputs as well. Here's an example of why:
  
  Function g(Param u) {
	function f(x) {
	  Return u*7*x;
	}
	Return f(3)+5;
  }
  
  g(u) => add(g::f(3[,u]),5)
  
  Param a;
  
  g(a) => add(g::f(3[,a]),5)
  g(a)+g(b) => add(add(g::f(3[,a]),5),add(g::f(3[,b]),5))
  
  Here if we didn't consider the implicit argument f(u), we would
  assume the two instances of g::f(3) are identical, but they aren't.
  

  Function definition
    List of formal parameters with formal types
	Internal Param definitions [create global param objects],
	  get added to implicit parameter list
	Other internal variable definitions are just shorhand
	Internal non-local references get added to the implicit parameter
	  list
  
  f(a,b,c) = a*b+c == add(mul(a,b),c) {
    inputs a, b, c;
	function add
	arguments {
	  Expression {
	    inputs a, b
		function mul
	  }
	  Expression {
		inputs c
		function param
	  }
	}
  }
  
  Instance f(1,2,3) {
	actual_inputs 1, 2, 3 - check list of instances of f
	function add
	arguments {
	  Expression {
		actual_inputs 1, 2 - check list of instances
	  }
	  Expression {
		actual_inputs 3 - check list
	  }
	}
  }
  
  Expression (function invocation)
	Each expression has a full list of inputs. {
	  These can be Params, inputs, constants
	  This is the union of the lists of inputs for all
	  decendent expressions in a left-to-right ordering.
	  These can be keys defined by Eli
	}
	Evaluation of an expression involves mapping a real live
	variable to the input keys and propogating that mapping
	to the input lists of the decendent expressions.
	
	'Actual inputs'

    Instantiation of an expression involves building a list
	of actual_inputs, then comparing that list to the list
	of instantiations for that function.
	
	For each formal_argument a
	  For each formal_input i of a
	    Find the corresponding actual_input in the parent
	  Pass the list of actual_arguments to expression_instantiation
	Finding the actual_inputs for an argument expression involves
	finding each formal_input
	comparing the list of formal_inputs for the child to
	the list of
	formal_inputs

What is a Function? {
    [should probably be distinguished from i/o functions]
  user-defined functions
  internally defined functions
  parameter, variable or constant reference
  Function MUL( PARAM a, b ) {
	d/da = b;
	d/db = a;
	Return a*b;
	-------------
	Formal parameters: PARAM a, b
	Formal PARAMs: a, b
	No internal definitions or implicit references
  }
  Function ADD( PARAM a, b ) {
	d/da = 1;
	d/db = 1;
	Return a+b;
	-------------
	Formal parameters: PARAM a, b
	Formal PARAMs: a, b
	No internal definitions or implicit references
  }
  Instantiation of an addition {
    ADD(g, MUL(h,k))
	is an Expression with the function referencing ADD
	2 actual arguments: g and MUL(h,k)
	3 actual inputs: g, h, k (suppose all PARAMs for the moment)
	3 actual PARAMs, hence 3 actual partials (my_partials)
	Need to evaluate each actual argument and collect a list
	  of values
	Invoke ADD with list of values, ref to list of func_partials
	Calculate my_partials
  }
  Function evaluation involves {
    evaluation of the inputs
	evaluation of the f(a[i]) and the partials with respect
	  to the formal and implicit PARAMs a[j[k]]
	The function only needs a list of input values and a
	  list of output partials (stored in the af_expr_instance
	Perhaps functions in this context are always internal functions?
	Invocation of a user-defined function is simply a reference
	  to the Return expression (with all the accompanying remapping
	  of inputs, plus extra magic having to do with parameter
	  initializations, etc.) Hence I always need my own list
	  of function partials.
  }
  Instantiation of an internal function does not involve a change
  of scope, but instantiation of a user-defined function does {
    Function f(a,b,c) {
	  Return g(c, b, a);
	}
	
	f(u,v,w) - check against instantiations of f. When comparing
	expressions for equivalence, we must look at implicit inputs
	as well, but only those implicit inputs from scopes outside
	this function (otherwise they aren't inputs, right?)
  }
}
What is an Expression

September 23, 2004

  Rationale for flavors of Ident
  Ident: The terminal
  DeclIdent: An instance declaring an Ident (specifying the type
			and/or length)
  DefIdent: An instance defining an Ident (i.e. an assignment to
			the Ident)
  UseIdent: A reference to an Ident.
  
  FuncDefIdent: Definition of a function name
  FuncUseIdent: function invocation
    (There is no FuncDeclIdent in the language)
  LVDefIdent: Specifically defining an LValue as opposed to a function
  LVUseIdent: Specifically referencing an LValue
  LVDeclIdent: Specifically declaring an LValue. Since there is no
    FuncDeclIdent, All DeclIdents are LVDeclIdents.

  DeclLValue: A declaration LValue, an LVDeclIdent or a DeclIndex
  DefLValue: A definition LValue, an LVDefIdent or a DefIndex
  UseLValue: A LValue reference, an LVUseIdent or a UseIndex
  
  A Prototype is a list of DeclLValues (more or less)
  An Array_Assignment LHS includes a list of DefLValues
  
  LValue: A CLASS SYMBOL encompassing (Decl|Def|Use)LValue
   Includes Variable reference for starters.

  Nuances arise with regard to arrays:
   -Arrays must be declared before they are defined (assigned to)
   -Array elements cannot be assigned in a declaration because of the
     ambiguity:
	  
	  INPUT Vec[4]; // Declares Vec to have 4 elements
	  Vec[3] = 2;   // Defines one element of Vec
	  INPUT Vec[3] = 5; // ERROR: Declaration or definition?
   -Prototypes are lists of declarations. This is different from
      standalone declarations which may include definitions.
   -Array assignment syntax is a definition, not a declaration, but
      array assignments may be legal:
	  
	  INPUT Vec[4]; // Declares Vec to have 4 elements
	  [ Vec, A, B ] = read_file(); // Defines entire vector Vec.
   -A variable or array element can be defined at most once. Undefined
      variables are implicitly PARAMs and must be initialized.
   -A PARAM variable may be defined (assigned to), but that makes it
      a non-PARAM. A non-PARAM may be initialized, but the
	  initialization will be ignored in favor of the definition.
   -In general, explicit declarations are optional except for arrays.
 
  Internally, a Variable refers to a syntactic element with standard
  scope definitions. All references to a specific name within one
  definition scope (not counting nested redefinitions) refer to the
  same Variable. However, the compilation process involves the
  unrolling of certain programming structures. Specifically, each
  invocation of a function results in new instantiations of the
  function's local variables. These instantiations are referred to
  as LValues within the C++ program. If a Variable is declared as
  an Array, its instantiations are actually arrays of LValues, so
  each LValue refers to a single scalar quantity. As a rule, arrays
  are a syntactic shorthand, but the elements of an array are
  completely independent. One element of an array may be a PARAM
  while other elements are INPUTs or CONSTs.
  
  So then the question is: when are Variable structures allocated
  (first reference?) and when are the LValue structures allocated?
  I'm using IdDefUse class from the Eli Name Analysis module which
  defines DefCond to be 1 during the first instance of a variable.
  I should be able to use that to decide whether to define the
  Variable structure. Specifically, I'll need to define it during
  declarations, since that specifies the type and possibly length.
  Then I would also define it on any other reference if DefCond=1.
  
  Declarations DeclLValue: These should always have DefCond==1 or it's
  a re-declaration. Variable should be defined here because we know
  whether or not there's an array definition.
  
  Definitions DefLValue:
    DefIndex: Must have DefCond!=1 and use must match declaration
	DefIdent: If DefCond==1, create Variable. Check use against def.

  Use UseLValue:
    UseIndex: Must have DefCond!=1
	UseIdent: If DefCond==1, create Variable.
	Check use against def
	
  I think DefLValue and UseLValue are much more similar than I might
  have thought. Key distinction is that DefLValue doesn't require
  an af_expr_lv (simply because the LHS of an assignment doesn't
  have to meld into the expression hierarchy) Perhaps I should have
  
  DefLValue : LValueRef .
  UseLValue : LValueRef .
  LValueRef : LVUseIdent / LVUseIdent '[' integer ']' .
  
  Eliminating all the special identifier types.
  Side-effect: LHS of Def_Assignment is now a DefLValue. This leaves
    open the possibility of allowing a double-declaration such as:
	
	  INPUT vec[4];
	  PARAM vec[3] = 5;
	This is listed as an error above. Perhaps I'll just specifically
	report an error because this construct is ambiguous.